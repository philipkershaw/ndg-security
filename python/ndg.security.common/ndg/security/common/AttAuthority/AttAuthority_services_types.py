################################################## 
# AttAuthority_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:ndg:security:attAuthority
##############################

class ns0:
    targetNamespace = "urn:ndg:security:attAuthority"

    class HostInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ndg:security:attAuthority"
        type = (schema, "HostInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.HostInfo_Def.schema
            TClist = [ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aaURI", aname="_aaURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aaDN", aname="_aaDN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginURI", aname="_loginURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginServerDN", aname="_loginServerDN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginRequestServerDN", aname="_loginRequestServerDN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="roleList", aname="_roleList", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostname = None
                    self._aaURI = None
                    self._aaDN = None
                    self._loginURI = None
                    self._loginServerDN = None
                    self._loginRequestServerDN = None
                    self._roleList = []
                    return
            Holder.__name__ = "HostInfo_Holder"
            self.pyclass = Holder

    class getAttCert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAttCert"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getAttCert_Dec.schema
            TClist = [ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userCert", aname="_userCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userAttCert", aname="_userAttCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:attAuthority","getAttCert")
            kw["aname"] = "_getAttCert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    self._userCert = None
                    self._userAttCert = None
                    return
            Holder.__name__ = "getAttCert_Holder"
            self.pyclass = Holder

    class getAttCertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAttCertResponse"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getAttCertResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="attCert", aname="_attCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="msg", aname="_msg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:attAuthority","getAttCertResponse")
            kw["aname"] = "_getAttCertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._attCert = None
                    self._msg = None
                    return
            Holder.__name__ = "getAttCertResponse_Holder"
            self.pyclass = Holder

    class getHostInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHostInfo"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getHostInfo_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security:attAuthority","getHostInfo")
            kw["aname"] = "_getHostInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getHostInfo_Holder"
            self.pyclass = Holder

    class getHostInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHostInfoResponse"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getHostInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aaURI", aname="_aaURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aaDN", aname="_aaDN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginURI", aname="_loginURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginServerDN", aname="_loginServerDN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginRequestServerDN", aname="_loginRequestServerDN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:attAuthority","getHostInfoResponse")
            kw["aname"] = "_getHostInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostname = None
                    self._aaURI = None
                    self._aaDN = None
                    self._loginURI = None
                    self._loginServerDN = None
                    self._loginRequestServerDN = None
                    return
            Holder.__name__ = "getHostInfoResponse_Holder"
            self.pyclass = Holder

    class getTrustedHostInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTrustedHostInfo"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getTrustedHostInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="role", aname="_role", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:attAuthority","getTrustedHostInfo")
            kw["aname"] = "_getTrustedHostInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._role = None
                    return
            Holder.__name__ = "getTrustedHostInfo_Holder"
            self.pyclass = Holder

    class getTrustedHostInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTrustedHostInfoResponse"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getTrustedHostInfoResponse_Dec.schema
            TClist = [GTD("urn:ndg:security:attAuthority","HostInfo",lazy=False)(pname="trustedHosts", aname="_trustedHosts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:attAuthority","getTrustedHostInfoResponse")
            kw["aname"] = "_getTrustedHostInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trustedHosts = []
                    return
            Holder.__name__ = "getTrustedHostInfoResponse_Holder"
            self.pyclass = Holder

    class getAllHostsInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllHostsInfo"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getAllHostsInfo_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security:attAuthority","getAllHostsInfo")
            kw["aname"] = "_getAllHostsInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getAllHostsInfo_Holder"
            self.pyclass = Holder

    class getAllHostsInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllHostsInfoResponse"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getAllHostsInfoResponse_Dec.schema
            TClist = [GTD("urn:ndg:security:attAuthority","HostInfo",lazy=False)(pname="hosts", aname="_hosts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:attAuthority","getAllHostsInfoResponse")
            kw["aname"] = "_getAllHostsInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hosts = []
                    return
            Holder.__name__ = "getAllHostsInfoResponse_Holder"
            self.pyclass = Holder

    class getX509Cert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getX509Cert"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getX509Cert_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security:attAuthority","getX509Cert")
            kw["aname"] = "_getX509Cert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getX509Cert_Holder"
            self.pyclass = Holder

    class getX509CertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getX509CertResponse"
        schema = "urn:ndg:security:attAuthority"
        def __init__(self, **kw):
            ns = ns0.getX509CertResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="x509Cert", aname="_x509Cert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:attAuthority","getX509CertResponse")
            kw["aname"] = "_getX509CertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._x509Cert = None
                    return
            Holder.__name__ = "getX509CertResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:ndg:security:attAuthority)
