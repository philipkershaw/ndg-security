#
# NERC DataGrid SOAP WS-Security tests
#
# Paste configuration for test application secured with WS-Security signature
# handler
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# Author: P J Kershaw
# date: 26/01/2010
# Copyright: (C) 2010 Science and Technology Facilities Council
# license: BSD - see LICENSE file in top-level directory
# Contact: Philip.Kershaw@stfc.ac.uk
# Revision: $Id: $

[DEFAULT]
portNum = 9080
hostname = localhost
scheme = http
baseURI = %(scheme)s://%(hostname)s:%(portNum)s
testConfigDir = %(here)s/../../../../config
echoServicePath = /echoService
echoServiceURI = %(baseURI)s%(echoServicePath)s


[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = %(portNum)s

[app:MyApp]
use = egg:Paste#static
document_root = %(here)s/htdocs

[pipeline:main]
pipeline = wsseSignatureVerificationFilter 
		   EchoServiceFilter 
           wsseSignatureFilter 
		   MyApp

#______________________________________________________________________________
# Echo Service WSGI settings
#
[filter:EchoServiceFilter]
# This filter is a container for a binding to a SOAP based interface to the
# Session Manager
paste.filter_app_factory = ndg.soap.server.wsgi.zsi:SOAPBindingMiddleware

# Use this ZSI generated SOAP service interface class to handle i/o for this
# filter
ServiceSOAPBindingClass = ndg.soap.wssecurity.test.unit.signatureHandler.foursuite.server.echoService.echoServiceWS

# SOAP Binding Class specific keywords are in this section identified by this
# prefix:
ServiceSOAPBindingPropPrefix = echoService

# The echoService class has settings in the default section above identified
# by this prefix:
echoService.propPrefix = echoService
echoService.propFilePath = %(here)s/securityservices.ini

# This filter may references the WS-Security signature verification 
# filter to access content e.g. client certificate used
echoService.wsseSignatureVerificationFilterID = filter:wsseSignatureVerificationFilter

# The echoServiceWS SOAP interface class needs to know about these other 
# filters
referencedFilters = filter:wsseSignatureVerificationFilter 
					filter:AttributeAuthorityFilter

# Path from URI for Session Manager in this Paste deployment
path = %(echoServicePath)s

# External endpoint for this service 
publishedURI = %(echoServiceURI)s

# Enable ?wsdl query argument to list the WSDL content
enableWSDLQuery = True
charset = utf-8

# Provide an identifier for this filter so that main WSGI app 
# CombinedServicesWSGI can call this Session Manager directly
filterID = %(__name__)s

#______________________________________________________________________________
# WS-Security Signature Verification
[filter:wsseSignatureVerificationFilter]
paste.filter_app_factory = ndg.soap.wssecurity.server.wsgi.signaturehandler:SignatureVerificationFilter.filter_app_factory
filterID = %(__name__)s

# Settings for WS-Security SignatureHandler class used by this filter
wsseCfgFilePrefix = wssecurity

# Verify against known CAs - Provide a space separated list of file paths
wssecurity.caCertFilePathList=%(testConfigDir)s/ca/d573507a.0

#______________________________________________________________________________
# Apply WS-Security Signature 
[filter:wsseSignatureFilter]
paste.filter_app_factory = ndg.soap.wssecurity.server.wsgi.signaturehandler:ApplySignatureFilter.filter_app_factory

# Reference the verification filter in order to be able to apply signature
# confirmation
referencedFilters = filter:wsseSignatureVerificationFilter
wsseSignatureVerificationFilterID = filter:wsseSignatureVerificationFilter

# Last filter in chain of SOAP handlers writes the response
writeResponse = True

# Settings for WS-Security SignatureHandler class used by this filter
wsseCfgFilePrefix = wssecurity

# Certificate associated with private key used to sign a message.  The sign 
# method will add this to the BinarySecurityToken element of the WSSE header.  
wssecurity.signingCertFilePath=%(testConfigDir)s/pki/wsse-server.crt

# PEM encoded private key file
wssecurity.signingPriKeyFilePath=%(testConfigDir)s/pki/wsse-server.key

# Set the ValueType for the BinarySecurityToken added to the WSSE header for a
# signed message.  See __setReqBinSecTokValType method and binSecTokValType 
# class variable for options - it may be one of X509, X509v3, X509PKIPathv1 or 
# give full namespace to alternative - see 
# ZSI.wstools.Namespaces.OASIS.X509TOKEN
#
# binSecTokValType determines whether signingCert or signingCertChain 
# attributes will be used.
wssecurity.reqBinSecTokValType=X509v3

# Add a timestamp element to an outbound message
wssecurity.addTimestamp=True

# For WSSE 1.1 - service returns signature confirmation containing signature 
# value sent by client
wssecurity.applySignatureConfirmation=True

# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_ndg]
level = DEBUG
handlers =
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-5.5s [%(name)s:%(lineno)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S

