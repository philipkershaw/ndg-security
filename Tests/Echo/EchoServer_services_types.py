################################################## 
# EchoServer_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# urn:ZSI:examples
##############################

class urn_ZSI_examples:
    targetNamespace = "urn:ZSI:examples"

    class Echo(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Echo"
        schema = "urn:ZSI:examples"
        def __init__(self, **kw):
            ns = urn_ZSI_examples.Echo.schema
            TClist = [ZSI.TC.String(pname=(ns,"EchoIn"), aname="EchoIn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI:examples","Echo")
            kw["aname"] = "Echo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.EchoIn = None
                    return
            Holder.__name__ = "Echo_Holder"
            self.pyclass = Holder

    class EchoResponse(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "EchoResponse"
        schema = "urn:ZSI:examples"
        def __init__(self, **kw):
            ns = urn_ZSI_examples.EchoResponse.schema
            TClist = [ZSI.TC.String(pname=(ns,"EchoResult"), aname="EchoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI:examples","EchoResponse")
            kw["aname"] = "EchoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.EchoResult = None
                    return
            Holder.__name__ = "EchoResponse_Holder"
            self.pyclass = Holder

    class EchoEncr(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "EchoEncr"
        schema = "urn:ZSI:examples"
        def __init__(self, **kw):
            ns = urn_ZSI_examples.EchoEncr.schema
            TClist = [ZSI.TC.String(pname=(ns,"EchoIn"), aname="EchoIn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI:examples","EchoEncr")
            kw["aname"] = "EchoEncr"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.EchoIn = None
                    return
            Holder.__name__ = "EchoEncr_Holder"
            self.pyclass = Holder

    class EchoEncrResponse(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "EchoEncrResponse"
        schema = "urn:ZSI:examples"
        def __init__(self, **kw):
            ns = urn_ZSI_examples.EchoEncrResponse.schema
            TClist = [ZSI.TC.String(pname=(ns,"EchoResult"), aname="EchoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI:examples","EchoEncrResponse")
            kw["aname"] = "EchoEncrResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.EchoResult = None
                    return
            Holder.__name__ = "EchoEncrResponse_Holder"
            self.pyclass = Holder

# end class urn_ZSI_examples (tns: urn:ZSI:examples)
