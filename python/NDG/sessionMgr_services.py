################################################## 
# sessionMgr_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class sessionMgrServiceInterface:
    def getsessionMgr(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class sessionMgrServiceLocator(sessionMgrServiceInterface):
    sessionMgr_address = "http://glue.badc.rl.ac.uk/sessionMgr"
    def getsessionMgrAddress(self):
        return sessionMgrServiceLocator.sessionMgr_address

    def getsessionMgr(self, portAddress=None, **kw):
        return sessionMgrBindingSOAP(portAddress or sessionMgrServiceLocator.sessionMgr_address, **kw)


class sessionMgrBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def addUser(self, request):
        """
        @param: request to addUserRequest::
          _addUserReq: str

        @return: response from addUserResponse::
          _addUserResp: str
        """

        if not isinstance(request, addUserRequest) and\
            not issubclass(addUserRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:sessionMgr#addUser", **kw)
        response = self.binding.Receive(addUserResponseWrapper())
        if not isinstance(response, addUserResponse) and\
            not issubclass(addUserResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def connect(self, request):
        """
        @param: request to connectRequest::
          _connectReq: str

        @return: response from connectResponse::
          _connectResp: str
        """

        if not isinstance(request, connectRequest) and\
            not issubclass(connectRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:sessionMgr#connect", **kw)
        response = self.binding.Receive(connectResponseWrapper())
        if not isinstance(response, connectResponse) and\
            not issubclass(connectResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def getPubKey(self, request):
        """
        @param: request to pubKeyRequest::
          _pubKeyReq: str

        @return: response from pubKeyResponse::
          _pubKeyResp: str
        """

        if not isinstance(request, pubKeyRequest) and\
            not issubclass(pubKeyRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:sessionMgr#getPubKey", **kw)
        response = self.binding.Receive(pubKeyResponseWrapper())
        if not isinstance(response, pubKeyResponse) and\
            not issubclass(pubKeyResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def reqAuthorisation(self, request):
        """
        @param: request to authorisationRequest::
          _authorisationReq: str

        @return: response from authorisationResponse::
          _authorisationResp: str
        """

        if not isinstance(request, authorisationRequest) and\
            not issubclass(authorisationRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:sessionMgr#reqAuthorisation", **kw)
        response = self.binding.Receive(authorisationResponseWrapper())
        if not isinstance(response, authorisationResponse) and\
            not issubclass(authorisationResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class addUserRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._addUserReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, addUserRequest, [ZSI.TC.String(pname="addUserReq",aname="_addUserReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class addUserRequestWrapper(addUserRequest):
    """wrapper for rpc:encoded message"""

    typecode = addUserRequest(name='addUser', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        addUserRequest.__init__( self, name='addUser', ns='urn:sessionMgr' )

class addUserResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._addUserResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, addUserResponse, [ZSI.TC.String(pname="addUserResp",aname="_addUserResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class addUserResponseWrapper(addUserResponse):
    """wrapper for rpc:encoded message"""

    typecode = addUserResponse(name='addUserResponse', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        addUserResponse.__init__( self, name='addUserResponse', ns='urn:sessionMgr' )

class authorisationRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._authorisationReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, authorisationRequest, [ZSI.TC.String(pname="authorisationReq",aname="_authorisationReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class authorisationRequestWrapper(authorisationRequest):
    """wrapper for rpc:encoded message"""

    typecode = authorisationRequest(name='reqAuthorisation', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        authorisationRequest.__init__( self, name='reqAuthorisation', ns='urn:sessionMgr' )

class authorisationResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._authorisationResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, authorisationResponse, [ZSI.TC.String(pname="authorisationResp",aname="_authorisationResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class authorisationResponseWrapper(authorisationResponse):
    """wrapper for rpc:encoded message"""

    typecode = authorisationResponse(name='reqAuthorisationResponse', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        authorisationResponse.__init__( self, name='reqAuthorisationResponse', ns='urn:sessionMgr' )

class connectRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._connectReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, connectRequest, [ZSI.TC.String(pname="connectReq",aname="_connectReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class connectRequestWrapper(connectRequest):
    """wrapper for rpc:encoded message"""

    typecode = connectRequest(name='connect', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        connectRequest.__init__( self, name='connect', ns='urn:sessionMgr' )

class connectResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._connectResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, connectResponse, [ZSI.TC.String(pname="connectResp",aname="_connectResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class connectResponseWrapper(connectResponse):
    """wrapper for rpc:encoded message"""

    typecode = connectResponse(name='connectResponse', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        connectResponse.__init__( self, name='connectResponse', ns='urn:sessionMgr' )

class pubKeyRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._pubKeyReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, pubKeyRequest, [ZSI.TC.String(pname="pubKeyReq",aname="_pubKeyReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class pubKeyRequestWrapper(pubKeyRequest):
    """wrapper for rpc:encoded message"""

    typecode = pubKeyRequest(name='getPubKey', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        pubKeyRequest.__init__( self, name='getPubKey', ns='urn:sessionMgr' )

class pubKeyResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._pubKeyResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, pubKeyResponse, [ZSI.TC.String(pname="pubKeyResp",aname="_pubKeyResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class pubKeyResponseWrapper(pubKeyResponse):
    """wrapper for rpc:encoded message"""

    typecode = pubKeyResponse(name='getPubKeyResponse', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        pubKeyResponse.__init__( self, name='getPubKeyResponse', ns='urn:sessionMgr' )
