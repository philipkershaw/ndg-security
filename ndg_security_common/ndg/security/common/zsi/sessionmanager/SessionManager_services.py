################################################## 
# SessionManager_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from SessionManager_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class SessionManagerServiceLocator:
    SessionManager_address = "http://localhost:5000"
    def getSessionManagerAddress(self):
        return SessionManagerServiceLocator.SessionManager_address
    def getSessionManager(self, url=None, **kw):
        return SessionManagerBindingSOAP(url or SessionManagerServiceLocator.SessionManager_address, **kw)

# Methods
class SessionManagerBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x84cac4c>
    def getSessionStatus(self, userDN,sessID):

        request = getSessionStatusInputMsg()
        request._userDN = userDN
        request._sessID = sessID

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="getSessionStatus", **kw)
        # no output wsaction
        response = self.binding.Receive(getSessionStatusOutputMsg.typecode)
        isAlive = response._isAlive
        return isAlive

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x84caf4c>
    def connect(self, username,passphrase,createServerSess):

        request = connectInputMsg()
        request._username = username
        request._passphrase = passphrase
        request._createServerSess = createServerSess

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="connect", **kw)
        # no output wsaction
        response = self.binding.Receive(connectOutputMsg.typecode)
        userX509Cert = response._userX509Cert
        userPriKey = response._userPriKey
        issuingCert = response._issuingCert
        sessID = response._sessID
        return userX509Cert,userPriKey,issuingCert,sessID

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x84d1aec>
    def disconnect(self, userX509Cert,sessID):

        request = disconnectInputMsg()
        request._userX509Cert = userX509Cert
        request._sessID = sessID

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="disconnect", **kw)
        # no output wsaction
        response = self.binding.Receive(disconnectOutputMsg.typecode)
        return 

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x84d1c8c>
    def getAttCert(self, userX509Cert,sessID,attributeAuthorityURI,reqRole,mapFromTrustedHosts,rtnExtAttCertList,extAttCert,extTrustedHost):

        request = getAttCertInputMsg()
        request._userX509Cert = userX509Cert
        request._sessID = sessID
        request._attributeAuthorityURI = attributeAuthorityURI
        request._reqRole = reqRole
        request._mapFromTrustedHosts = mapFromTrustedHosts
        request._rtnExtAttCertList = rtnExtAttCertList
        request._extAttCert = extAttCert
        request._extTrustedHost = extTrustedHost

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="getAttCert", **kw)
        # no output wsaction
        response = self.binding.Receive(getAttCertOutputMsg.typecode)
        attCert = response._attCert
        msg = response._msg
        extAttCertOut = response._extAttCertOut
        return attCert,msg,extAttCertOut

getSessionStatusInputMsg = ns0.getSessionStatus_Dec().pyclass

getSessionStatusOutputMsg = ns0.getSessionStatusResponse_Dec().pyclass

connectInputMsg = ns0.connect_Dec().pyclass

connectOutputMsg = ns0.connectResponse_Dec().pyclass

disconnectInputMsg = ns0.disconnect_Dec().pyclass

disconnectOutputMsg = ns0.disconnectResponse_Dec().pyclass

getAttCertInputMsg = ns0.getAttCert_Dec().pyclass

getAttCertOutputMsg = ns0.getAttCertResponse_Dec().pyclass
