# Configuration file for WS-Security settings 
# 
# NERC Data Grid Project
# 
# P J Kershaw 01/04/08
# 
# Copyright (C) 2009 Science and Technology Facilities Council
# 
# This software may be distributed under the terms of the Q Public License,
# version 1.0 or later.
#
# TODO: Refactor option names - put into inbound and outbound sections / apply
# namespace prefixes to better categorise
[DEFAULT]

#
# OUTBOUND MESSAGE CONFIG

# Signature of an outbound message

# Certificate associated with private key used to sign a message.  The sign 
# method will add this to the BinarySecurityToken element of the WSSE header.  
# binSecTokValType attribute must be set to 'X509' or 'X509v3' ValueType.  
# As an alternative, use signingCertChain - see below...

# Provide the PEM encoded content here
signingCert=

# ... or provide file path PEM encode cert here
signingCertFilePath=$NDGSEC_UNITTEST_CONFIG_DIR/pki/wsse-server.crt
#signingCertFilePath=$NDGSEC_UNITTEST_CONFIG_DIR/pki/java-ca-server.crt

# Pass a list of certificates ',' separated PEM encoded certs constituting a 
# chain of trust from the certificate used to verifying the signature backward 
# to the CA cert.  The CA cert need not be included.  To use this option, 
# reqBinSecTokValType must be set to the X509PKIPathv1
signingCertChain=

# PEM encoded content of private key file used by sign method to sign message
signingPriKey=

# ... or provide file path to PEM encoded private key file
signingPriKeyFilePath=$NDGSEC_UNITTEST_CONFIG_DIR/pki/wsse-server.key
#signingPriKeyFilePath=$NDGSEC_UNITTEST_CONFIG_DIR/pki/java-ca-server.key

# Password protecting private key.  Leave blank if there is no password.
signingPriKeyPwd=

# Set the ValueType for the BinarySecurityToken added to the WSSE header for a
# signed message.  See __setReqBinSecTokValType method and binSecTokValType 
# class variable for options - it may be one of X509, X509v3, X509PKIPathv1 or 
# give full namespace to alternative - see 
# ZSI.wstools.Namespaces.OASIS.X509TOKEN
#
# binSecTokValType determines whether signingCert or signingCertChain 
# attributes will be used.
reqBinSecTokValType=X509v3

# Add a timestamp element to an outbound message
addTimestamp=True

# For WSSE 1.1 - service returns signature confirmation containing signature 
# value sent by client
applySignatureConfirmation=True

# Inclusive namespace prefixes - for Exclusive Canonicalisation only
# TODO: include option to set C14N algorithm - C14N currently set to Exclusive

# Inclusive namespace prefixes Canonicalisation of reference elements - 
# space separated list e.g. refC14nInclNS=wsse ds ns1
refC14nInclNS=

# Inclusive namespaces prefixes for Canonicalisation of SignedInfo element -
# same format as the above
signedInfoC14nInclNS=

#
# INBOUND MESSAGE CONFIG

# X.509 certificate used by verify method to verify a message.  This argument 
# can be omitted if the message to be verified contains the X.509 certificate 
# in the BinarySecurityToken element.  In this case, the cert read from the
# message will be assigned to the verifyingCert attribute.

# Provide the PEM encoded content here
verifyingCert=

# ... or provide file path PEM encode cert here
verifyingCertFilePath=

# Set CA certificates for verification of chain of trust for inbound messages
# Set a directory from which to pick up CA cert files or ...
caCertDirPath=

# Provide a space separated list of file paths
# - NB, the two CA certificates are for the python and the java clients, respectively
caCertFilePathList=$NDGSEC_UNITTEST_CONFIG_DIR/ca/java-ca.crt $NDGSEC_UNITTEST_CONFIG_DIR/ca/ndg-test-ca.crt