################################################## 
# gatekeeper_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class gatekeeperServiceInterface:
    def getgatekeeper(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class gatekeeperServiceLocator(gatekeeperServiceInterface):
    gatekeeper_address = "http://localhost:5200"
    def getgatekeeperAddress(self):
        return gatekeeperServiceLocator.gatekeeper_address

    def getgatekeeper(self, portAddress=None, **kw):
        return gatekeeperBindingSOAP(portAddress or gatekeeperServiceLocator.gatekeeper_address, **kw)


class gatekeeperBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def executeAccess(self, request):
        """
        @param: request to executeAccessRequest::
          _attCert: str

        @return: response from executeAccessResponse::
          _errMsg: str
          _matchingRole: str
        """

        if not isinstance(request, executeAccessRequest) and\
            not issubclass(executeAccessRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:gatekeeper#executeAccess", **kw)
        response = self.binding.Receive(executeAccessResponseWrapper())
        if not isinstance(response, executeAccessResponse) and\
            not issubclass(executeAccessResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def readAccess(self, request):
        """
        @param: request to readAccessRequest::
          _attCert: str

        @return: response from readAccessResponse::
          _errMsg: str
          _matchingRole: str
        """

        if not isinstance(request, readAccessRequest) and\
            not issubclass(readAccessRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:gatekeeper#readAccess", **kw)
        response = self.binding.Receive(readAccessResponseWrapper())
        if not isinstance(response, readAccessResponse) and\
            not issubclass(readAccessResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def writeAccess(self, request):
        """
        @param: request to writeAccessRequest::
          _attCert: str

        @return: response from writeAccessResponse::
          _errMsg: str
          _matchingRole: str
        """

        if not isinstance(request, writeAccessRequest) and\
            not issubclass(writeAccessRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:gatekeeper#writeAccess", **kw)
        response = self.binding.Receive(writeAccessResponseWrapper())
        if not isinstance(response, writeAccessResponse) and\
            not issubclass(writeAccessResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class executeAccessRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._attCert = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, executeAccessRequest, [ZSI.TC.String(pname="attCert",aname="_attCert",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class executeAccessRequestWrapper(executeAccessRequest):
    """wrapper for rpc:encoded message"""

    typecode = executeAccessRequest(name='executeAccess', ns='urn:gatekeeper')
    def __init__( self, name=None, ns=None, **kw ):
        executeAccessRequest.__init__( self, name='executeAccess', ns='urn:gatekeeper' )

class executeAccessResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._matchingRole = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, executeAccessResponse, [ZSI.TC.String(pname="matchingRole",aname="_matchingRole",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class executeAccessResponseWrapper(executeAccessResponse):
    """wrapper for rpc:encoded message"""

    typecode = executeAccessResponse(name='executeAccessResponse', ns='urn:gatekeeper')
    def __init__( self, name=None, ns=None, **kw ):
        executeAccessResponse.__init__( self, name='executeAccessResponse', ns='urn:gatekeeper' )

class readAccessRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._attCert = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, readAccessRequest, [ZSI.TC.String(pname="attCert",aname="_attCert",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class readAccessRequestWrapper(readAccessRequest):
    """wrapper for rpc:encoded message"""

    typecode = readAccessRequest(name='readAccess', ns='urn:gatekeeper')
    def __init__( self, name=None, ns=None, **kw ):
        readAccessRequest.__init__( self, name='readAccess', ns='urn:gatekeeper' )

class readAccessResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._matchingRole = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, readAccessResponse, [ZSI.TC.String(pname="matchingRole",aname="_matchingRole",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class readAccessResponseWrapper(readAccessResponse):
    """wrapper for rpc:encoded message"""

    typecode = readAccessResponse(name='readAccessResponse', ns='urn:gatekeeper')
    def __init__( self, name=None, ns=None, **kw ):
        readAccessResponse.__init__( self, name='readAccessResponse', ns='urn:gatekeeper' )

class writeAccessRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._attCert = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, writeAccessRequest, [ZSI.TC.String(pname="attCert",aname="_attCert",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class writeAccessRequestWrapper(writeAccessRequest):
    """wrapper for rpc:encoded message"""

    typecode = writeAccessRequest(name='writeAccess', ns='urn:gatekeeper')
    def __init__( self, name=None, ns=None, **kw ):
        writeAccessRequest.__init__( self, name='writeAccess', ns='urn:gatekeeper' )

class writeAccessResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._matchingRole = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, writeAccessResponse, [ZSI.TC.String(pname="matchingRole",aname="_matchingRole",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class writeAccessResponseWrapper(writeAccessResponse):
    """wrapper for rpc:encoded message"""

    typecode = writeAccessResponse(name='writeAccessResponse', ns='urn:gatekeeper')
    def __init__( self, name=None, ns=None, **kw ):
        writeAccessResponse.__init__( self, name='writeAccessResponse', ns='urn:gatekeeper' )
