################################################## 
# log_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class logServiceInterface:
    def getlog(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class logServiceLocator(logServiceInterface):
    log_address = ""
    def getlogAddress(self):
        return logServiceLocator.log_address

    def getlog(self, portAddress=None, **kw):
        return logBindingSOAP(portAddress or logServiceLocator.log_address, **kw)


class logBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def debug(self, request):
        """
        @param: request to debugRequest::
          _debugReq: str

        @return: response from debugResponse::
          _debugResp: str
        """

        if not isinstance(request, debugRequest) and\
            not issubclass(debugRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:log#debug", **kw)
        response = self.binding.Receive(debugResponseWrapper())
        if not isinstance(response, debugResponse) and\
            not issubclass(debugResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def error(self, request):
        """
        @param: request to errorRequest::
          _errorReq: str

        @return: response from errorResponse::
          _errorResp: str
        """

        if not isinstance(request, errorRequest) and\
            not issubclass(errorRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:log#error", **kw)
        response = self.binding.Receive(errorResponseWrapper())
        if not isinstance(response, errorResponse) and\
            not issubclass(errorResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def info(self, request):
        """
        @param: request to infoRequest::
          _infoReq: str

        @return: response from infoResponse::
          _infoResp: str
        """

        if not isinstance(request, infoRequest) and\
            not issubclass(infoRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:log#info", **kw)
        response = self.binding.Receive(infoResponseWrapper())
        if not isinstance(response, infoResponse) and\
            not issubclass(infoResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def warning(self, request):
        """
        @param: request to warningRequest::
          _warningReq: str

        @return: response from warningResponse::
          _warningResp: str
        """

        if not isinstance(request, warningRequest) and\
            not issubclass(warningRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:log#warning", **kw)
        response = self.binding.Receive(warningResponseWrapper())
        if not isinstance(response, warningResponse) and\
            not issubclass(warningResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class debugRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._debugReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, debugRequest, [ZSI.TC.String(pname="debugReq",aname="_debugReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class debugRequestWrapper(debugRequest):
    """wrapper for rpc:encoded message"""

    typecode = debugRequest(name='debug', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        debugRequest.__init__( self, name='debug', ns='urn:log' )

class debugResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._debugResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, debugResponse, [ZSI.TC.String(pname="debugResp",aname="_debugResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class debugResponseWrapper(debugResponse):
    """wrapper for rpc:encoded message"""

    typecode = debugResponse(name='debugResponse', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        debugResponse.__init__( self, name='debugResponse', ns='urn:log' )

class errorRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._errorReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, errorRequest, [ZSI.TC.String(pname="errorReq",aname="_errorReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class errorRequestWrapper(errorRequest):
    """wrapper for rpc:encoded message"""

    typecode = errorRequest(name='error', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        errorRequest.__init__( self, name='error', ns='urn:log' )

class errorResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._errorResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, errorResponse, [ZSI.TC.String(pname="errorResp",aname="_errorResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class errorResponseWrapper(errorResponse):
    """wrapper for rpc:encoded message"""

    typecode = errorResponse(name='errorResponse', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        errorResponse.__init__( self, name='errorResponse', ns='urn:log' )

class infoRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._infoReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, infoRequest, [ZSI.TC.String(pname="infoReq",aname="_infoReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class infoRequestWrapper(infoRequest):
    """wrapper for rpc:encoded message"""

    typecode = infoRequest(name='info', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        infoRequest.__init__( self, name='info', ns='urn:log' )

class infoResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._infoResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, infoResponse, [ZSI.TC.String(pname="infoResp",aname="_infoResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class infoResponseWrapper(infoResponse):
    """wrapper for rpc:encoded message"""

    typecode = infoResponse(name='infoResponse', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        infoResponse.__init__( self, name='infoResponse', ns='urn:log' )

class warningRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._warningReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, warningRequest, [ZSI.TC.String(pname="warningReq",aname="_warningReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class warningRequestWrapper(warningRequest):
    """wrapper for rpc:encoded message"""

    typecode = warningRequest(name='warning', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        warningRequest.__init__( self, name='warning', ns='urn:log' )

class warningResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._warningResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, warningResponse, [ZSI.TC.String(pname="warningResp",aname="_warningResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class warningResponseWrapper(warningResponse):
    """wrapper for rpc:encoded message"""

    typecode = warningResponse(name='warningResponse', ns='urn:log')
    def __init__( self, name=None, ns=None, **kw ):
        warningResponse.__init__( self, name='warningResponse', ns='urn:log' )
