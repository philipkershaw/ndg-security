#
# Description:	Paste configuration for OpenID Relying Party and SSL client
#               authentication filters.
#
# 		The %(here)s variable will be replaced with the parent directory
#		of this file
#
# Author: 		P J Kershaw
# Date: 		27/04/11
# Copyright: 	(C) 2011 Science and Technology Facilities Council
# license: 		BSD - see LICENSE file in top-level directory
# Contact: 		Philip.Kershaw@stfc.ac.uk


# Settings global to all sections
[DEFAULT]
portNum = 6443
hostname = localhost
scheme = https
baseURI = %(scheme)s://%(hostname)s:%(portNum)s

# The default OpenID set in the Relying Party form text field.  As shown it is
# set so that the special IDSelect mode can be used where the user enters only
# the portion of the URI identifying their Provider instead of their full
# OpenID URI
openIDProviderIDSelectURI = https://localhost:7443/openid/


# Beaker session is used across multiple sections so is set here to ensure 
# consistency
beakerSessionKeyName = beaker.session.ndg.security.services
	
# AuthKit Cookie secret used to secure it.  This secret must be the same as the
# one used in the equivalent secured application(s) ini file(s) that use this
# ini file's OpenID Relying Party and SSL authentication service.  This is
# because the cookie is shared between the secured app(s) and this app so that
# a user's OpenID can be communicated between them.
authkitCookieSecret = shared secret
authkitCookieName = ndg.security.auth

# Secret for OpenID RP cookie
beakerSessionCookieSecret = RP secret

testConfigDir = %(here)s/../../config

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = %(portNum)s

# Ordering of filters and final app is critical
[pipeline:main]
pipeline = SessionMiddlewareFilter
	   SSLClientAuthKitFilter
	   SSLClientAuthenticationFilter
	   SSLClientAuthnRedirectResponseFilter
	   OpenIDRelyingPartyApp

#______________________________________________________________________________
# Beaker Session Middleware (used by OpenID Provider)
[filter:SessionMiddlewareFilter]
paste.filter_app_factory=beaker.middleware:SessionMiddleware
beaker.session.key = ndg.security.sslclient
beaker.session.secret = %(beakerSessionCookieSecret)s

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
beaker.cache.data_dir = %(here)s/openidrelyingparty/beaker/cache
beaker.session.data_dir = %(here)s/openidrelyingparty/beaker/sessions
beaker.session.cookie_expires = True

# Key name for keying into environ dictionary
environ_key = %(beakerSessionKeyName)s

#______________________________________________________________________________
# Sets AuthKit cookie for SSL Client based authentication method
[filter:SSLClientAuthKitFilter]
paste.filter_app_factory = authkit.authenticate:middleware

# AuthKit Set-up
setup.method=cookie

# This cookie name and secret MUST agree with the name used by the 
# Authentication Filter used to secure a given app
cookie.name=%(authkitCookieName)s

cookie.secret=%(authkitCookieSecret)s
cookie.signoutpath = /logout

# Disable inclusion of client IP address from cookie signature due to 
# suspected problem with AuthKit setting it when a HTTP Proxy is in place
cookie.includeip = False

#______________________________________________________________________________
# SSL Client Certificate based authentication is invoked if the client passed
# a certificate with request.  This bypasses OpenID based authentication
[filter:SSLClientAuthenticationFilter]
paste.filter_app_factory = ndg.security.server.wsgi.ssl:AuthKitSSLAuthnMiddleware
prefix = ssl.

# Apply verification against a list of trusted CAs.  To skip this step, comment
# out or remove this item.  e.g. set CA verification in the Apache config file.
ssl.caCertFilePathList = %(testConfigDir)s/pki/ca/d573507a.0

# Apply whitelisting of client certificate DNs.  This should never be needed in
# this context.  The only reason to use it might be as a means to set a crude 
# access control list of DNs
ssl.clientCertDNMatchList = /O=NDG/OU=BADC/CN=mytest /O=gabriel/OU=BADC/CN=test /O=NDG/OU=BADC/CN=test

# The 'HTTP_' prefix is set when passed through a proxy with Apache, for example
# if it's possible to run this ini file with paster and expose it through port
# 443 via ProxyPass and ProxyPassReverse Apache directives.
#ssl.sslKeyName = HTTP_HTTPS
#ssl.sslClientCertKeyName = HTTP_SSL_CLIENT_CERT

# Set the intercept URI.  Request URIs matching this pattern will be processed
# by this filter.  The pattern is set here to match the URI that would normally
# be processed by the OpenID Relying Party.  If this filter finds a client 
# cert set from the SSL handshake it will apply authentication based on this, if
# not it will let the request pass by and on to the OpenID Relying Party.  The
# latter is then therefore the default and 'catch all' for authentication 
# requests. 
ssl.rePathMatchList = ^/verify.*

#______________________________________________________________________________
# OpenID Relying Party.  This app is set to run over SSL so that it can work
# together with the SSL Client Authentication filter above so that tandem
# authentication methods are supported.  It can be invoked from a HTTP app by 
# the ndg.security.server.wsgi.authn.AuthenticationMiddleware which causes a 
# redirect to this endpoint.
[app:OpenIDRelyingPartyApp]
paste.app_factory = 
	ndg.security.server.wsgi.openid.relyingparty:OpenIDRelyingPartyMiddleware.app_factory

openid.relyingparty.baseURL = %(authkit.openid.baseurl)s

# Uncomment to restrict sign in to a whitelist of trusted OpenID Providers.
#openid.relyingparty.idpWhitelistConfigFilePath = %(here)s/openidrelyingparty/ssl-idp-validator.xml

openid.relyingparty.signinInterfaceMiddlewareClass = ndg.security.server.wsgi.openid.relyingparty.signin_interface.genshi.GenshiSigninTemplate

# Nb. in this configuration, this directory is provider static content for both 
# this filter and the OpenID Provider app downstream in the WSGI stack.
openid.relyingparty.signinInterface.staticContentRootDir = %(here)s/openidrelyingparty/public

openid.relyingparty.signinInterface.baseURL = %(openid.relyingparty.baseURL)s
openid.relyingparty.signinInterface.initialOpenID = %(openIDProviderIDSelectURI)s
openid.relyingparty.signinInterface.heading = OpenID Sign-in

# This setting will accept HTML mark-up
openid.relyingparty.signinInterface.footerText = Test OpenID Service.
openid.relyingparty.signinInterface.rightLink = http://ceda.ac.uk/
openid.relyingparty.signinInterface.rightImage = %(openid.relyingparty.signinInterface.baseURL)s/layout/CEDA_RightButton60.png
openid.relyingparty.signinInterface.rightAlt = Centre for Environmental Data Archival
openid.relyingparty.signinInterface.helpIcon = %(openid.relyingparty.signinInterface.baseURL)s/layout/icons/help.png

cache_dir = %(here)s/data

# AuthKit Set-up
authkit.setup.method=openid, cookie

# This cookie name and secret MUST agree with the name used by the 
# Authentication Filter used to secure a given app
authkit.cookie.name=%(authkitCookieName)s

authkit.cookie.secret=%(authkitCookieSecret)s
authkit.cookie.signoutpath = /logout
#authkit.cookie.params.domain = .localhost

# Disable inclusion of client IP address from cookie signature due to 
# suspected problem with AuthKit setting it when a HTTP Proxy is in place
authkit.cookie.includeip = False

authkit.openid.path.signedin=/
authkit.openid.store.type=file
authkit.openid.store.config=%(here)s/openidrelyingparty/store
authkit.openid.session.key = authkit_openid
authkit.openid.session.secret = session secret

# Key name for dereferencing beaker.session object held in environ
authkit.openid.session.middleware = %(beakerSessionKeyName)s

authkit.openid.baseurl = %(baseURI)s

# Attribute Exchange - all are optional unless the relevant ax.required.<name> 
# is set to True.  The alias defers to the parameter name given unless explicity
# specified - see commented out entry for firstName below.  The number of
# attributes for each attribute name defaults to 1 unless otherwise set
#authkit.openid.ax.typeuri.firstName=http://openid.net/schema/namePerson/first
#authkit.openid.ax.alias.firstName=firstName
##authkit.openid.ax.count.firstName=1
#authkit.openid.ax.required.firstName=True
#authkit.openid.ax.typeuri.lastName=http://openid.net/schema/namePerson/last
#authkit.openid.ax.alias.lastName=lastName
#authkit.openid.ax.required.lastName=True
#authkit.openid.ax.typeuri.emailAddress=http://openid.net/schema/contact/internet/email
#authkit.openid.ax.alias.emailAddress=emailAddress
#authkit.openid.ax.required.emailAddress=True

# ESG Gateway requested parameters
authkit.openid.ax.typeuri.uuid:http://openid.net/schema/person/guid
authkit.openid.ax.alias.uuid=uuid
authkit.openid.ax.typeuri.username:http://openid.net/schema/namePerson/friendly
authkit.openid.ax.alias.username=username
authkit.openid.ax.typeuri.firstname:http://openid.net/schema/namePerson/first
authkit.openid.ax.alias.firstname=firstname
authkit.openid.ax.required.firstname:True
authkit.openid.ax.typeuri.middlename:http://openid.net/schema/namePerson/middle
authkit.openid.ax.alias.middlename=middlename
authkit.openid.ax.typeuri.lastname:http://openid.net/schema/namePerson/last
authkit.openid.ax.required.lastname:True
authkit.openid.ax.alias.lastname=lastname
authkit.openid.ax.typeuri.email:http://openid.net/schema/contact/internet/email
authkit.openid.ax.required.email:True
authkit.openid.ax.alias.email=email
authkit.openid.ax.typeuri.gateway:http://www.earthsystemgrid.org/gateway
authkit.openid.ax.alias.gateway=gateway
authkit.openid.ax.typeuri.organization:http://openid.net/schema/company/name
authkit.openid.ax.alias.organization=organization
authkit.openid.ax.typeuri.city:http://openid.net/schema/contact/city/home
authkit.openid.ax.alias.city=city
authkit.openid.ax.typeuri.state:http://openid.net/schema/contact/state/home
authkit.openid.ax.alias.state=state
authkit.openid.ax.typeuri.country:http://openid.net/schema/contact/country/home
authkit.openid.ax.alias.country=country

#______________________________________________________________________________
# Redirect to original requested URI following SSL Client Authentication.  This
# filter must be placed AFTER the AuthKit cookie setting middleware.  In this
# case here it's configured in the OpenIDRelyingPartyMiddleware filter.  If the
# OpenID Relying Party filter is removed, a separate AuthKit middleware entry
# would need to be made so that this redirect filter can still function
[filter:SSLClientAuthnRedirectResponseFilter]
paste.filter_app_factory = ndg.security.server.wsgi.authn:AuthKitRedirectResponseMiddleware
prefix = ssl.
ssl.sessionKey = %(beakerSessionKeyName)s

#______________________________________________________________________________
# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console, logfile

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_ndg]
level = DEBUG
handlers =
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-7.7s [%(name)s:%(lineno)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S

[handler_logfile]
class = handlers.RotatingFileHandler
level=NOTSET
formatter=generic
args=(os.path.join('%(here)s', 'log', 'authenticationservice.log'), 'a', 50000, 2)

