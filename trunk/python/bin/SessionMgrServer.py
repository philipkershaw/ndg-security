#!/usr/bin/env python

"""NDG Session Manager Web Services server interface

NERC Data Grid Project

P J Kershaw 16/08/05

Copyright (C) 2006 CCLRC & NERC

This software may be distributed under the terms of the Q Public License,
version 1.0 or later.
"""

# Handle socket errors from WS
import socket 

# Command line processing
import sys
import os
import optparse

# Web service interface
from ZSI import dispatch
from ZSI.ServiceContainer import ServiceContainer, SOAPRequestHandler

# Session Manager Web Services stub code generated by wsdl2py and 
# wsdl2dispatch
from NDG.sessionMgr_services import *
from NDG.sessionMgr_services_server import sessionMgr

# Session Manager
from NDG.Session import *


#_____________________________________________________________________________
class SessionMgrSOAPRequestHandler(SOAPRequestHandler):
     """Add a do_GET method to return the WSDL on HTTP GET requests.
     Please note that the path to the wsdl file is derived from what
     the HTTP invocation delivers (which is put into the self.path
     attribute), so you might want to change this addressing scheme.
     """
     def do_GET(self):
         """Return the WSDL file."""
         
         wsdlfile = os.path.expandvars("$NDG_SECURITY_WSDL_DIR/sessionMgr.wsdl")
         
         print "> > > > > using wsdlfile", wsdlfile
         wsdl = open(wsdlfile).read()
         self.send_xml(wsdl)
 
     def do_POST(self):
          """Fudge to get _Dispatch to pick up the correct address
          - seems to be necessary when putting proxy redirect for port in
          the wsdl e.g. http://glue.badc.rl.ac.uk/sessionMgr points to the
          default port for the Session Manager."""
          self.path = "/sessionMgr.wsdl"
          SOAPRequestHandler.do_POST(self)
	   
	   
#_____________________________________________________________________________
# Copied from ZSI.ServiceContainer, extended to instantiate with a custom
# request handler
def AsServer(port=80, services=(), RequestHandlerClass=SOAPRequestHandler):
      """port --
          services -- list of service instances
       """
      address = ("", port)
      sc = ServiceContainer(address, RequestHandlerClass=RequestHandlerClass)
      for service in services:
           path = service.getPost()
           sc.setNode(service, path)
      sc.serve_forever()


#_____________________________________________________________________________
def runInForegnd():
    """Run Session Manager in the same process as this script"""
    
    print "Session Manager Server listening..."
    try:
         AsServer(port=options.port, 
                  services=(sessionMgr(sm, debug=options.debug),), 
                  RequestHandlerClass=SessionMgrSOAPRequestHandler)

    except KeyboardInterrupt:
        sys.exit(0)

    except socket.error, e:
        print >>sys.stderr, "Session Manager Server socket error: %s" % e[1]
        sys.exit(1)

    except Exception, e:
        print >>sys.stderr, "Session Manager Server: %s" % e
        sys.exit(1)
        

#_____________________________________________________________________________
def fork(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
    """Run Session Manager in a separate child process
    
    Thanks to Jorgen Hermann and user contributors for fork code
    
    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012
    
    """
    
    try: 
        pid = os.fork() 
        if pid > 0:
            # exit first parent
            sys.exit(0) 
    except OSError, e: 
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1)

    # Decouple from parent environment
    os.chdir("/") # Allows for current dir path being renamed or deleted
    os.setsid() 
    os.umask(0) 
    
    # Redirect standard file descriptors
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    
    sys.stdout.flush()
    sys.stderr.flush()

    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())
    

    # Do second fork
    try: 
        pid = os.fork() 
        if pid > 0:
            # exit from second parent
            sys.exit(pid) 
    except OSError, e: 
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1) 

    # start the daemon main loop
    try:
         AsServer(port=options.port, 
                  services=(sessionMgr(sm),), 
                  RequestHandlerClass=SessionMgrSOAPRequestHandler)

    except socket.error, e:
        print >>sys.stderr, "Session Manager Server socket error: %s" % e[1]
        sys.exit(1)

    except Exception, e:
        print >>sys.stderr, "Session Manager Server: %s" % e
        sys.exit(1)


#_____________________________________________________________________________
if __name__ == '__main__':

    parser = optparse.OptionParser()

    # Check in installation area otherwise assume local directory
    propFileDir = 'NDG_DIR' in os.environ and \
                            os.path.join(os.environ['NDG_DIR'], "conf") or "."

    propFilename = 'sessionMgrProperties.xml'
    parser.add_option("-f",
                      "--file",
                      dest="propFilePath",
                      default=os.path.join(propFileDir, propFilename),
                      help=\
"""properties file path - default is $NDG_DIR/conf/%s or ./%s if NDG_DIR is
not set""" % (propFilename, propFilename))
    
    parser.add_option("-w",
                      "--noencrkey",
                      action="store_true",
                      dest="noWSDLencrKey",
                      default=False,
                      help=\
"""skip the prompt for the encryption key and pick up the key from the 
'sessMgrEncrKey' tag in the properties file.""")
    
    parser.add_option("-n", 
                      "--nopassphrase",
                      action="store_true",
                      dest="noPPhrase",
                      default=False,
                      help=\
"""skip the prompt for the database pass-phrase.  In this case, the
pass-phrase must be set in the 'dbURI' tag in the configuration file.""")


    # Port may be set from an environment variable.  Note that this will be
    # overridden if the port command line argument is set 
    smPortNumEnvVarName = 'NDG_SM_PORT_NUM'
    defaultPort = 5700
    
    initPort = smPortNumEnvVarName in os.environ and \
                        int(os.environ[smPortNumEnvVarName]) or defaultPort
            
    parser.add_option("-p",
                      "--port",
                      dest="port",
                      default=initPort,
                      type="int",
                      help=\
"specify a port number - default is %d or set environment variable \"%s\"" % \
                                          (defaultPort, smPortNumEnvVarName))
    
    foregndFlags = ("-i", "--foreground")
    parser.add_option(action="store_true",
                      dest="foregndProc",
                      default=False,
                      help=\
"run server as process in the foreground.  If not set, fork a child process",
                      *foregndFlags)
    
    parser.add_option("-d",
                      "--debug",
                      action="store_true",
                      dest="debug",
                      default=False,
                      help=\
"set to stop in debugger on receipt of WS request.  %s flag must be set also"\
                                            % '/'.join(foregndFlags))
                                            
    (options, args) = parser.parse_args()


    if options.noPPhrase is False:
        import getpass
        try:
            credReposPPhrase = getpass.getpass(\
                                prompt="Credential Repository pass-phrase: ")
        except KeyboardInterrupt:
            sys.exit(1)
    else:
        credReposPPhrase = None


    if options.noWSDLencrKey is False:
        import getpass
        try:
            sessMgrEncrKey = getpass.getpass(prompt="WSDL Encryption Key: ")
        except KeyboardInterrupt:
            sys.exit(1)
    else:
        sessMgrEncrKey = None


    # Create server instance at start up
    try:
        sm = SessionMgr(options.propFilePath,
                        credReposPPhrase=credReposPPhrase,
                        sessMgrEncrKey=sessMgrEncrKey)

    except Exception, e:
        print >>sys.stderr, "Initialising Session Manager: %s" % e
        sys.exit(1)


    if options.foregndProc:
        runInForegnd()
    else:
        if options.debug:
            print >>sys.stderr, "%s must be set with debug option" % \
                                                    '/'.join(foregndFlags)
            parser.print_help()
            sys.exit(1)
            
        
        # Set this flag to True to catch errors raised in the new process
        # in a log.  Normally stderr is re-directed to /dev/null to avoid
        # conflists with the parent process    
        logForkErr = False
        if logForkErr:
            import tempfile
            errLogH, errLogFilePath = \
                                tempfile.mkstemp(".err", "SessionMgrServer-")
        else:
            errLogFilePath = '/dev/null'

        # Run server in separate process
        fork(stderr=errLogFilePath)    

