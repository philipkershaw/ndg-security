#!/usr/bin/env python

"""NDG Attribute Authority Web Services server interface

NERC Data Grid Project

P J Kershaw 05/05/05

Copyright (C) 2005 CCLRC & NERC

This software may be distributed under the terms of the Q Public License,
version 1.0 or later.
"""

cvsID = '$Id$'

# Handle socket errors from WS
import socket 

# Command line processing
import sys
import os
import getopt

# Web service interface
from ZSI import dispatch
from ZSI.ServiceContainer import ServiceContainer, SOAPRequestHandler

# Attribute Authority Web Services stub code generated by wsdl2py and 
# wsdl2dispatch
from NDG.attAuthority_services import *
from NDG.attAuthority_services_server import attAuthority

# Attribute Authority
from NDG.AttAuthority import *


#_____________________________________________________________________________
class SessionMgrSOAPRequestHandler(SOAPRequestHandler):
     """Add a do_GET method to return the WSDL on HTTP GET requests.
     Please note that the path to the wsdl file is derived from what
     the HTTP invocation delivers (which is put into the self.path
     attribute), so you might want to change this addressing scheme.
     """
     def do_GET(self):
         """Return the WSDL file."""
         
         wsdlfile = "/var/www/html/attAuthority.wsdl"
         
         print "> > > > > using wsdlfile", wsdlfile
         wsdl = open(wsdlfile).read()
         self.send_xml(wsdl)
 
     def do_POST(self):
          """Fudge to get _Dispatch to pick up the correct address
          - seems to be necessary when putting proxy redirect for port in
          the wsdl e.g. http://glue.badc.rl.ac.uk/attAuthority points to the
          default port for the Attribute Authority."""
          self.path = "/attAuthority.wsdl"
          SOAPRequestHandler.do_POST(self)
       
       
#_____________________________________________________________________________
# Copied from ZSI.ServiceContainer, extended to instantiate with a custom
# request handler
def AsServer(port=80, services=(), RequestHandlerClass=SOAPRequestHandler):
      """port --
          services -- list of service instances
       """
      address = ("127.0.0.1", port)
      sc = ServiceContainer(address, RequestHandlerClass=RequestHandlerClass)
      for service in services:
           path = service.getPost()
           sc.setNode(service, path)
      sc.serve_forever()


def usage():
    """Describes how to call AttAuthorityServer from the command line"""
    print "usage: %s " % sys.argv[0].split(os.sep)[-1]
    print """    
[-h | --help]
    print usage summary
    
[-f <properties file path> | --file=<properties file path>]

[-p <port #> | --port=<port #>
    specify a port number to override the default
    
[-d | --debug]
    set to stop in debugger on receipt of WS request
"""


#_____________________________________________________________________________
if __name__ == '__main__':

    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   "hf:p:d",
                                   ["help", "file=", "port=", "debug"])        
    except getopt.GetoptError:
        usage()
        sys.exit(1)


    propFilePath = None
    port = 5000 #80 # temporary port for testing
    debug = False
    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()                     
            sys.exit(0)
            
        elif opt in ("-d", "--debug"):
            debug = True
            
        elif opt in ("-f", "--file"):
            propFilePath = arg

        elif opt in ("-p", "--port"):
            port = int(arg)

    if propFilePath is None:
        # Check in installation area otherwise assume local directory
        if 'NDG_DIR' in os.environ:
            propFileDir = os.path.join(os.environ['NDG_DIR'], "conf")
        else:
            propFileDir = "."

        propFilePath = os.path.join(propFileDir, 'attAuthorityProperties.xml')

        
    # Create server instance at start up
    try:
        aa = AttAuthority(propFilePath)

    except Exception, e:
        sys.stderr.write("Initialising Attribute Authority: %s\n" % e)
        sys.exit(1)
    
    print "Attribute Authority Server listening..."
    try:
         AsServer(port=port, 
                  services=[attAuthority(aa, debug=debug)], 
                  RequestHandlerClass=SessionMgrSOAPRequestHandler)

    except KeyboardInterrupt:
        sys.exit(0)

    except socket.error, e:
        sys.stderr.write("Attribute Authority Server socket error: %s\n" % \
                         e[1])
        sys.exit(1)
        
    except Exception, e:
        sys.stderr.write("Attribute Authority Server: %s\n" % e)
        sys.exit(1)
        
