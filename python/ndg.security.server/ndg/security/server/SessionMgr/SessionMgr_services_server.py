##################################################
# SessionMgr_services_server.py
#      Generated by ZSI.generate.wsdl2dispatch.DelAuthServiceModuleWriter
#
##################################################

from ndg.security.common.SessionMgr.SessionMgr_services import *
from ZSI.ServiceContainer import ServiceSOAPBinding

class SessionMgrService(ServiceSOAPBinding):
    soapAction = {}
    root = {}
    _wsdl = """<?xml version=\"1.0\" ?>
<wsdl:definitions name=\"SessionMgr\" targetNamespace=\"urn:ndg:security:sessionMgr\" xmlns=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:tns=\"urn:ndg:security:sessionMgr\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">

  <wsdl:types>
    <xsd:schema targetNamespace=\"urn:ndg:security:sessionMgr\">
      <xsd:element name=\"getSessionStatus\">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"userDN\" type=\"xsd:string\"/>
            <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"sessID\" type=\"xsd:string\"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name=\"getSessionStatusResponse\">
        <xsd:complexType>
          <xsd:sequence>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"isAlive\" type=\"xsd:boolean\"/>
		  </xsd:sequence>
        </xsd:complexType>
      </xsd:element>

      <xsd:element name=\"connect\">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"username\" type=\"xsd:string\"/>
            <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"passphrase\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"createServerSess\" type=\"xsd:boolean\"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name=\"connectResponse\">
        <xsd:complexType>
		  <xsd:sequence>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"userCert\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"userPriKey\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"issuingCert\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"sessID\" type=\"xsd:string\"/>
		  </xsd:sequence>
		</xsd:complexType>
      </xsd:element>

      <xsd:element name=\"disconnect\">
        <xsd:complexType>
		  <xsd:sequence>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"userCert\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"sessID\" type=\"xsd:string\"/>
		  </xsd:sequence>
		</xsd:complexType>
      </xsd:element>

      <xsd:element name=\"disconnectResponse\">
        <xsd:complexType/>
      </xsd:element>
            
      <xsd:element name=\"getAttCert\">
        <xsd:complexType>
		  <xsd:sequence>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"userCert\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"sessID\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"attAuthorityURI\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"attAuthorityCert\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"reqRole\" type=\"xsd:string\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"mapFromTrustedHosts\" type=\"xsd:boolean\"/>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"rtnExtAttCertList\" type=\"xsd:boolean\"/>
			<xsd:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"extAttCert\" type=\"xsd:string\"/>
			<xsd:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"extTrustedHost\" type=\"xsd:string\"/>
   		  </xsd:sequence>
		</xsd:complexType>
      </xsd:element>
      
      <xsd:element name=\"getAttCertResponse\">
        <xsd:complexType>
	      <xsd:sequence>
	        <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"attCert\" type=\"xsd:string\"/>
	        <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"msg\" type=\"xsd:string\"/>
			<xsd:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"extAttCertOut\" type=\"xsd:string\"/>
	      </xsd:sequence>
	    </xsd:complexType>
      </xsd:element>

      <xsd:element name=\"getX509Cert\">
        <xsd:complexType/>
      </xsd:element>
      
      <xsd:element name=\"getX509CertResponse\">
        <xsd:complexType>
		  <xsd:sequence>
		    <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"x509Cert\" type=\"xsd:string\"/>
		  </xsd:sequence>
		</xsd:complexType>
      </xsd:element>

    </xsd:schema>
  </wsdl:types>
 
  <wsdl:message name=\"getSessionStatusInputMsg\">
    <wsdl:part element=\"tns:getSessionStatus\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"getSessionStatusOutputMsg\">
    <wsdl:part element=\"tns:getSessionStatusResponse\" name=\"parameters\"/>
  </wsdl:message>
 
  <wsdl:message name=\"connectInputMsg\">
    <wsdl:part element=\"tns:connect\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"connectOutputMsg\">
    <wsdl:part element=\"tns:connectResponse\" name=\"parameters\"/>
  </wsdl:message>
  
  <wsdl:message name=\"disconnectInputMsg\">
    <wsdl:part element=\"tns:disconnect\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"disconnectOutputMsg\">
    <wsdl:part element=\"tns:disconnectResponse\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"getAttCertInputMsg\">
    <wsdl:part element=\"tns:getAttCert\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"getAttCertOutputMsg\">
    <wsdl:part element=\"tns:getAttCertResponse\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"getX509CertInputMsg\">
    <wsdl:part element=\"tns:getX509Cert\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"getX509CertOutputMsg\">
    <wsdl:part element=\"tns:getX509CertResponse\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:portType name=\"SessionMgr\">
    <wsdl:operation name=\"getSessionStatus\">
      <wsdl:input message=\"tns:getSessionStatusInputMsg\"/>
      <wsdl:output message=\"tns:getSessionStatusOutputMsg\"/>
    </wsdl:operation>

    <wsdl:operation name=\"connect\">
      <wsdl:input message=\"tns:connectInputMsg\"/>
      <wsdl:output message=\"tns:connectOutputMsg\"/>
    </wsdl:operation>

    <wsdl:operation name=\"disconnect\">
      <wsdl:input message=\"tns:disconnectInputMsg\"/>
      <wsdl:output message=\"tns:disconnectOutputMsg\"/>
    </wsdl:operation>

    <wsdl:operation name=\"getAttCert\">
      <wsdl:input message=\"tns:getAttCertInputMsg\"/>
      <wsdl:output message=\"tns:getAttCertOutputMsg\"/>
    </wsdl:operation>

    <wsdl:operation name=\"getX509Cert\">
      <wsdl:input message=\"tns:getX509CertInputMsg\"/>
      <wsdl:output message=\"tns:getX509CertOutputMsg\"/>
    </wsdl:operation>
  </wsdl:portType>  
  
  <wsdl:binding name=\"SessionMgrBinding\" type=\"tns:SessionMgr\">
    <soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>

    <wsdl:operation name=\"getSessionStatus\">
      <soap:operation soapAction=\"getSessionStatus\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output> 
    </wsdl:operation>
    
    <wsdl:operation name=\"connect\">
      <soap:operation soapAction=\"connect\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output> 
    </wsdl:operation>
    
    <wsdl:operation name=\"disconnect\">
      <soap:operation soapAction=\"disconnect\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output> 
    </wsdl:operation>
    
    <wsdl:operation name=\"getAttCert\">
      <soap:operation soapAction=\"getAttCert\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output> 
    </wsdl:operation>

    <wsdl:operation name=\"getX509Cert\">
      <soap:operation soapAction=\"getX509Cert\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output> 
    </wsdl:operation>    
  
  </wsdl:binding>

  <wsdl:service name=\"SessionMgrService\">
    <wsdl:documentation>NERC Data Grid Session Manager web service</wsdl:documentation>
    <wsdl:port binding=\"tns:SessionMgrBinding\" name=\"SessionMgr\">
      <soap:address location=\"http://localhost:5000\"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>"""

    def __init__(self, post='', **kw):
        ServiceSOAPBinding.__init__(self, post)
        if kw.has_key('impl'):
            self.impl = kw['impl']
        self.auth_method_name = None
        if kw.has_key('auth_method_name'):
            self.auth_method_name = kw['auth_method_name']
    def authorize(self, auth_info, post, action):
        if self.auth_method_name and hasattr(self.impl, self.auth_method_name):
            return getattr(self.impl, self.auth_method_name)(auth_info, post, action)
        else:
            return 1

    def soap_getSessionStatus(self, ps):
        self.request = ps.Parse(getSessionStatusInputMsg.typecode)
        parameters = (self.request._userDN, self.request._sessID)

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.getSessionStatus(parameters[0],parameters[1])

        result = getSessionStatusOutputMsg()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._isAlive = parameters
        return self.request, result

    soapAction['getSessionStatus'] = 'soap_getSessionStatus'
    root[(getSessionStatusInputMsg.typecode.nspname,getSessionStatusInputMsg.typecode.pname)] = 'soap_getSessionStatus'

    def soap_connect(self, ps):
        self.request = ps.Parse(connectInputMsg.typecode)
        parameters = (self.request._username, self.request._passphrase, self.request._createServerSess)

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.connect(parameters[0],parameters[1],parameters[2])

        result = connectOutputMsg()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            # Should have a tuple of 4 args
            result._userCert = parameters[0]
            result._userPriKey = parameters[1]
            result._issuingCert = parameters[2]
            result._sessID = parameters[3]
        return self.request, result

    soapAction['connect'] = 'soap_connect'
    root[(connectInputMsg.typecode.nspname,connectInputMsg.typecode.pname)] = 'soap_connect'

    def soap_disconnect(self, ps):
        self.request = ps.Parse(disconnectInputMsg.typecode)
        parameters = (self.request._userCert, self.request._sessID)

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.disconnect(parameters[0],parameters[1])

        result = disconnectOutputMsg()
        return self.request, result

    soapAction['disconnect'] = 'soap_disconnect'
    root[(disconnectInputMsg.typecode.nspname,disconnectInputMsg.typecode.pname)] = 'soap_disconnect'

    def soap_getAttCert(self, ps):
        self.request = ps.Parse(getAttCertInputMsg.typecode)
        parameters = (self.request._userCert, self.request._sessID, self.request._attAuthorityURI, self.request._attAuthorityCert, self.request._reqRole, self.request._mapFromTrustedHosts, self.request._rtnExtAttCertList, self.request._extAttCert, self.request._extTrustedHost)

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.getAttCert(parameters[0],parameters[1],parameters[2],parameters[3],parameters[4],parameters[5],parameters[6],parameters[7],parameters[8])

        result = getAttCertOutputMsg()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            # Should have a tuple of 3 args
            result._attCert = parameters[0]
            result._msg = parameters[1]
            result._extAttCertOut = parameters[2]
        return self.request, result

    soapAction['getAttCert'] = 'soap_getAttCert'
    root[(getAttCertInputMsg.typecode.nspname,getAttCertInputMsg.typecode.pname)] = 'soap_getAttCert'

    def soap_getX509Cert(self, ps):
        self.request = ps.Parse(getX509CertInputMsg.typecode)

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.getX509Cert()

        result = getX509CertOutputMsg()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._x509Cert = parameters
        return self.request, result

    soapAction['getX509Cert'] = 'soap_getX509Cert'
    root[(getX509CertInputMsg.typecode.nspname,getX509CertInputMsg.typecode.pname)] = 'soap_getX509Cert'

