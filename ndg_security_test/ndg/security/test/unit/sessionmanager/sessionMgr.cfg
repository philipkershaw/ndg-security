# Configuration file for Session Manager Server 
# 
# NERC Data Grid Project
# 
# P J Kershaw 07/10/08
# 
# Copyright (C) 2009 Science and Technology Facilities Council
# 
# BSD - See LICENCE file for details
#
[DEFAULT]
# ALL the settings from this point to the Credential Wallet settings heading
# are not actually used in these unit tests because the Session Manager is not
# being run as a service, it's being run as a local instance within the tests.
# The settings are included to ensure that they're correctly parsed by the 
# config file reader

# the port number the service is to run on - for convenience only may be 
# ignored by web application server container - e.g. Paste - see ini file
portNum:  

# Flag for SSL - set to True to stipulate https, leave blank to use http 
useSSL: False

# X.509 certificate for SSL connections - ignored if useSSL is blank - Nb.
sslCertFile: $NDGSEC_TEST_CONFIG_DIR/sessionmanager/sm.crt

# Private key file for SSL  - ignored if useSSL is blank 
sslKeyFile: $NDGSEC_TEST_CONFIG_DIR/sessionmanager/sm.key

# Directory containing CA cert.s to verify SSL peer cert against - ignored if 
# useSSL is blank 
sslCACertDir: $NDGSEC_TEST_CONFIG_DIR/ca

# Credential Wallet Settings - global to all user sessions
#
# CA certificates for Attribute Certificate signature validation
credentialWallet.caCertFilePathList=$NDGSEC_TEST_CONFIG_DIR/ca/ndg-test-ca.crt

# CA certificates for SSL connection peer cert. validation - required if
# connecting to an Attribute Authority over SSL
credentialWallet.sslCACertFilePathList=$NDGSEC_TEST_CONFIG_DIR/ca/ndg-test-ca.crt

# Allow Get Attribute Certificate calls to try to get a mapped certificate
# from another organisation trusted by the target Attribute Authority
credentialWallet.mapFromTrustedHosts=True
credentialWallet.rtnExtAttCertList=True

# Refresh an Attribute Certificate, if an existing one in the wallet has only
# this length of time left before it expires
credentialWallet.attCertRefreshElapse=7200

# Pointer to WS-Security settings.  IN this case, they're identified by a 
# prefix.  
credentialWallet.wssCfgPrefix=credentialWallet.wssecurity

# ...A section name could also be used.
#credentialWallet.wssCfgSection=

# SOAP Signature Handler settings for the Credential Wallet's Attribute 
# Authority interface
#
# CA Certificates used to verify X.509 certs used in Attribute Certificates.
# The CA certificates of other NDG trusted sites should go here.  NB, multiple
# values should be delimited by a space
credentialWallet.wssecurity.caCertFilePathList: $NDGSEC_TEST_CONFIG_DIR/ca/ndg-test-ca.crt

# Signature of an outbound message
#
# Certificate associated with private key used to sign a message.  The sign 
# method will add this to the BinarySecurityToken element of the WSSE header.  
# binSecTokValType attribute must be set to 'X509' or 'X509v3' ValueType.  
# As an alternative, use signingCertChain - see below...

# PEM encoded cert
credentialWallet.wssecurity.signingCertFilePath: $NDGSEC_TEST_CONFIG_DIR/sessionmanager/sm.crt

# ... or provide file path to PEM encoded private key file
credentialWallet.wssecurity.signingPriKeyFilePath: $NDGSEC_TEST_CONFIG_DIR/sessionmanager/sm.key

# Set the ValueType for the BinarySecurityToken added to the WSSE header for a
# signed message.  See __setReqBinSecTokValType method and binSecTokValType 
# class variable for options - it may be one of X509, X509v3, X509PKIPathv1 or 
# give full namespace to alternative - see 
# ZSI.wstools.Namespaces.OASIS.X509TOKEN
#
# binSecTokValType determines whether signingCert or signingCertChain 
# attributes will be used.
credentialWallet.wssecurity.reqBinSecTokValType: X509v3

# Add a timestamp element to an outbound message
credentialWallet.wssecurity.addTimestamp: True

# For WSSE 1.1 - service returns signature confirmation containing signature 
# value sent by client
credentialWallet.wssecurity.applySignatureConfirmation: True

# Settings for Credential Repository plugin
# File path to plugin module - may be left blank if module is included in the 
# current PYTHONPATH
#credentialRepository.modFilePath:

#
# Module name - the default is an empty stub
credentialRepository.modName: ndg.security.common.credentialwallet

# Name of class in module to instantiate 
credentialRepository.className: NullCredentialRepository

# Optional Properties file argument to Credential Repository class.  This is 
# include to enable custom settings to be defined from an external 
# configuration file
credentialRepository.propertiesFile:

# Authentication service properties 
authNService.moduleFilePath: 
authNService.moduleName: ndg.security.server.authnservice.basicauthn
authNService.className: BasicAuthN

# Specific settings for BasicAuthN Session Manager authentication plugin
# This sets up two test accounts.  Passwords are MD5 encrypted
authNService.accounts: testuser:e16b2ab8d12314bf4efbd6203906ea6c ndg-user:e16b2ab8d12314bf4efbd6203906ea6c

## Example settings for Database based authentication - requires access to a
# database; uses SQLAlchemy for Python database bindings
#authNService.moduleName: ndg.security.server.authnservice.dbauthn
#authNService.className: DatabaseAuthN
#authNService.connectionString: postgres://testuser:testpassword@localhost/testUserDb
## This query must return zero rows for invalid credentials entered
#authNService.sqlQuery: select username from users where username = '%%(username)s' and md5_passwd = '%%(password)s'
#authNService.isMD5EncodedPwd: True

