################################################## 
# simpleCA_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class simpleCAServiceInterface:
    def getsimpleCA(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class simpleCAServiceLocator(simpleCAServiceInterface):
    simpleCA_address = "http://127.0.0.1:5000/simpleCA.wsdl"
    def getsimpleCAAddress(self):
        return simpleCAServiceLocator.simpleCA_address

    def getsimpleCA(self, portAddress=None, **kw):
        return simpleCABindingSOAP(portAddress or simpleCAServiceLocator.simpleCA_address, **kw)


class simpleCABindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def reqCert(self, request):
        """
        @param: request to reqCertRequest::
          _usrCertReq: str

        @return: response from reqCertResponse::
          _errMsg: str
          _usrCert: str
        """

        if not isinstance(request, reqCertRequest) and\
            not issubclass(reqCertRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:simpleCA#reqCert", **kw)
        response = self.binding.Receive(reqCertResponseWrapper())
        if not isinstance(response, reqCertResponse) and\
            not issubclass(reqCertResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class reqCertRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._usrCertReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, reqCertRequest, [ZSI.TC.String(pname="usrCertReq",aname="_usrCertReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class reqCertRequestWrapper(reqCertRequest):
    """wrapper for rpc:encoded message"""

    typecode = reqCertRequest(name='reqCert', ns='urn:simpleCA')
    def __init__( self, name=None, ns=None, **kw ):
        reqCertRequest.__init__( self, name='reqCert', ns='urn:simpleCA' )

class reqCertResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._usrCert = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, reqCertResponse, [ZSI.TC.String(pname="usrCert",aname="_usrCert",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class reqCertResponseWrapper(reqCertResponse):
    """wrapper for rpc:encoded message"""

    typecode = reqCertResponse(name='reqCertResponse', ns='urn:simpleCA')
    def __init__( self, name=None, ns=None, **kw ):
        reqCertResponse.__init__( self, name='reqCertResponse', ns='urn:simpleCA' )
