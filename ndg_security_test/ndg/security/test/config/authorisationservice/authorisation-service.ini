#
# Description: NDG Security Authorisation Service for unit tests 
#
# Author: P J Kershaw
#
# Date: 16/11/10
#
# Copyright: STFC 2010
#
# Licence: BSD - See top-level LICENCE file for licence details
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
authorisationDecisionFuncEnvironKeyName = saml.authz.queryInterfaceEnvironKey

# Name of this authorisation service and the format of name.  Both are used in
# SAML query/responses

# This name must follow X.509 Subject Name format if following 'samlIssuerFormat'
# is set as shown
samlIssuerName = O=NDG, OU=Security, CN=localhost
samlIssuerFormat = urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName

testConfigDir = %(here)s/../

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 5100

# Add static content here if required but note that none is needed for the 
# service to function
[app:AuthorisationServiceStaticContent]
use = egg:Paste#static
document_root = %(here)s/public

[pipeline:main]
pipeline = AuthorisationServiceFilter SAMLSoapAuthzDecisionInterfaceFilter AuthorisationServiceStaticContent

#______________________________________________________________________________
# SAML/SOAP query interface to the Authorisation Service
[filter:SAMLSoapAuthzDecisionInterfaceFilter]
paste.filter_app_factory = ndg.saml.saml2.binding.soap.server.wsgi.queryinterface:SOAPQueryInterfaceMiddleware.filter_app_factory
prefix = saml.

# The URI path for this service
saml.mountPath = /authorisation-service

# The key name in environ which the upstream authorisation service must assign
# to its authorisation query callback
saml.queryInterfaceKeyName = %(authorisationDecisionFuncEnvironKeyName)s

# ElementTree based XML parsing and serialisation used for SAML messages
saml.deserialise = ndg.saml.xml.etree:AuthzDecisionQueryElementTree.fromXML
saml.serialise = ndg.saml.xml.etree:ResponseElementTree.toXML

# Sets the identity of THIS authorisation service when filling in SAML responses
#saml.issuerName = /O=Test/OU=Authorisation Service
saml.issuerName = %(samlIssuerName)s
saml.issuerFormat = %(samlIssuerFormat)s

#______________________________________________________________________________
# Authorisation Service WSGI settings
[filter:AuthorisationServiceFilter]
# This filter is a container for a binding to a SOAP/SAML based interface to the
# Authorisation Service.  It contains a XACML Context handler which manages
# requests from Policy Enforcement Points to the PDP and also enables the PDP
# to make attribute queries to Policy Information Point
paste.filter_app_factory = ndg.security.server.wsgi.authz.service:AuthorisationServiceMiddleware.filter_app_factory
prefix = authz.
authz.queryInterfaceKeyName = %(authorisationDecisionFuncEnvironKeyName)s

# Lifetime for authorisation assertions issued from this service
authz.xacmlContext.assertionLifetime = 86400

#
# XACML Context handler manages PEP (Policy Information Point) requests and the 
# PDP's (Policy Decison Point's) interface to the PIP (Policy Information Point)
# 

# XACML Policy file
authz.ctx_handler.policyFilePath = %(here)s/policy.xml

# Settings for SAML authorisation decision response to a Policy Enforcement Point
# making a decision query
authz.ctx_handler.issuerName = %(samlIssuerName)s
authz.ctx_handler.issuerFormat = %(samlIssuerFormat)s
authz.ctx_handler.assertionLifetime = 86400

# Add Earth System Grid custom types and functions to XACML
authz.ctx_handler.xacmlExtFunc = ndg.security.server.xacml.esgf_ext:addEsgfXacmlSupport

#
# Policy Information Point interface settings
#
# The Context handler is a client to the PIP, passing on attribute queries 
# on behalf of the PDP onwards to the PIP

# The PIP can cache assertions retrieved from Attribute Authority calls to
# optimise performance.  Set this flag to True/False to enable/disable caching
# respectively.  If this setting is omitted it defaults to True
#authz.ctx_handler.pip.cacheSessions = False

# Set the directory for cached information to be stored.  This options is 
# ignored if 'cacheSessions' is set to False.  If this setting is omitted, then
# sessions will be cached in memory only.  In this case, if the service is 
# stopped all cached information would be lost
#authz.ctx_handler.pip.sessionCacheDataDir = %(here)s/pip-session-cache

# Set timeout (seconds) for a cached session - following the timeout any existing
# session will be deleted.  This option is ignored if 
# authz.ctx_handler.pip.cacheSessions = False.  If this option is omitted, no 
# timeout is set.  If none is set and authz.ctx_handler.pip.sessionCacheDataDir 
# is set, sessions will be effectively cached permanently(!) only an assertion 
# expiry could invalidate a given assertion previously cached.
#authz.ctx_handler.pip.sessionCacheTimeout = 3600

# Allow for a clock skew of +/- 3 seconds when checking validity times of
# SAML assertions cached from attribute service queries
authz.ctx_handler.pip.sessionCacheAssertionClockSkewTol = 3.0

# 
# Attribute ID -> Attribute Authority mapping file.  The PIP, on receipt of a 
# query from the XACML context handler, checks the attribute(s) being queried 
# for and looks up this mapping to determine which attribute authority to query 
# to find out if the subject has the attribute in their entitlement
authz.ctx_handler.pip.mappingFilePath = %(here)s/pip-mapping.txt

# The attribute ID of the subject value to extract from the XACML request
# context and pass in the SAML attribute query
authz.ctx_handler.pip.subjectAttributeId = urn:esg:openid

# The context handler 
authz.ctx_handler.pip.attributeQuery.issuerName = %(authz.ctx_handler.issuerName)s
authz.ctx_handler.pip.attributeQuery.issuerFormat = %(authz.ctx_handler.issuerFormat)s

authz.ctx_handler.pip.attributeQuery.serialise = ndg.saml.xml.etree:AttributeQueryElementTree.toXML

# Enable support for ESGF Group/Role Attribute Value in SAML Attribute queries
#authz.ctx_handler.pip.attributeQuery.serialise = ndg.saml.xml.etree:AttributeQueryElementTree.fromXML
authz.ctx_handler.pip.attributeQuery.deserialise = ndg.security.common.saml_utils.esgf.xml.etree:ESGFResponseElementTree.fromXML

# These settings configure SSL mutual authentication for the query to the SAML Attribute Authority
authz.ctx_handler.pip.attributeQuery.sslCertFilePath = %(testConfigDir)s/pki/localhost.crt
authz.ctx_handler.pip.attributeQuery.sslPriKeyFilePath = %(testConfigDir)s/pki/localhost.key
authz.ctx_handler.pip.attributeQuery.sslCACertDir = %(testConfigDir)s/pki/ca


# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console, logfile

[formatters]
keys = generic

[logger_root]
level = DEBUG
handlers = console, logfile

[logger_ndg]
level = DEBUG
handlers = 
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-8.8s [%(name)s:%(lineno)d] %(message)s
datefmt = %Y/%m/%d %H:%M:%S

[handler_logfile]
class = handlers.RotatingFileHandler
level=NOTSET
formatter=generic
args=(os.path.join('%(here)s', 'service.log'), 'a', 10000, 2)
