################################################## 
# AttAuthority_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:ndg:security
##############################

class ns0:
    targetNamespace = "urn:ndg:security"

    class getAttCert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAttCert"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getAttCert_Dec.schema
            TClist = [ZSI.TC.String(pname="userCert", aname="_userCert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security","getAttCert")
            kw["aname"] = "_getAttCert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userCert = None
                    return
            Holder.__name__ = "getAttCert_Holder"
            self.pyclass = Holder

    class getAttCertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAttCertResponse"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getAttCertResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="attCert", aname="_attCert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security","getAttCertResponse")
            kw["aname"] = "_getAttCertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._attCert = None
                    return
            Holder.__name__ = "getAttCertResponse_Holder"
            self.pyclass = Holder

    class getHostInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHostInfo"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getHostInfo_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security","getHostInfo")
            kw["aname"] = "_getHostInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getHostInfo_Holder"
            self.pyclass = Holder

    class getHostInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHostInfoResponse"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getHostInfoResponse_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security","getHostInfoResponse")
            kw["aname"] = "_getHostInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getHostInfoResponse_Holder"
            self.pyclass = Holder

    class getTrustedHostInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTrustedHostInfo"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getTrustedHostInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="role", aname="_role", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security","getTrustedHostInfo")
            kw["aname"] = "_getTrustedHostInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._role = None
                    return
            Holder.__name__ = "getTrustedHostInfo_Holder"
            self.pyclass = Holder

    class getTrustedHostInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTrustedHostInfoResponse"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getTrustedHostInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="trustedHosts", aname="_trustedHosts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security","getTrustedHostInfoResponse")
            kw["aname"] = "_getTrustedHostInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trustedHosts = None
                    return
            Holder.__name__ = "getTrustedHostInfoResponse_Holder"
            self.pyclass = Holder

    class getPubKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPubKey"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getPubKey_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security","getPubKey")
            kw["aname"] = "_getPubKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getPubKey_Holder"
            self.pyclass = Holder

    class getPubKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPubKeyResponse"
        schema = "urn:ndg:security"
        def __init__(self, **kw):
            ns = ns0.getPubKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="x509Cert", aname="_x509Cert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security","getPubKeyResponse")
            kw["aname"] = "_getPubKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._x509Cert = None
                    return
            Holder.__name__ = "getPubKeyResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:ndg:security)
