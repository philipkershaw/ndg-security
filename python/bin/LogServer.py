#!/usr/bin/env python

"""NDG Logging Web Service server interface

NERC Data Grid Project

P J Kershaw 12/05/06

Copyright (C) 2006 CCLRC & NERC

This software may be distributed under the terms of the Q Public License,
version 1.0 or later.
"""

# Handle socket errors from WS
import socket 

# Command line processing
import sys
import os
import optparse

# Web service interface
from ZSI import dispatch
from ZSI.ServiceContainer import ServiceContainer, SOAPRequestHandler

# Logging Web Services stub code generated by wsdl2py and 
# wsdl2dispatch
from NDG.log_services import *
from NDG.log_services_server import log

# Logging
from NDG.Log import *


#_____________________________________________________________________________
class LogSOAPRequestHandler(SOAPRequestHandler):
     """Add a do_GET method to return the WSDL on HTTP GET requests.
     Please note that the path to the wsdl file is derived from what
     the HTTP invocation delivers (which is put into the self.path
     attribute), so you might want to change this addressing scheme.
     """
     def do_GET(self):
         """Return the WSDL file."""
         
         wsdlfile = "/var/www/html/log.wsdl"
         
         print "> > > > > using wsdlfile", wsdlfile
         wsdl = open(wsdlfile).read()
         self.send_xml(wsdl)
 
     def do_POST(self):
          """Fudge to get _Dispatch to pick up the correct address
          - seems to be necessary when putting proxy redirect for port in
          the wsdl e.g. http://glue.badc.rl.ac.uk/log points to the
          default port for the Logging."""
          self.path = "/log.wsdl"
          SOAPRequestHandler.do_POST(self)
       
       
#_____________________________________________________________________________
# Copied from ZSI.ServiceContainer, extended to instantiate with a custom
# request handler
def AsServer(port=80, services=(), RequestHandlerClass=SOAPRequestHandler):
      """port --
          services -- list of service instances
       """
      address = ("127.0.0.1", port)
      sc = ServiceContainer(address, RequestHandlerClass=RequestHandlerClass)
      for service in services:
           path = service.getPost()
           sc.setNode(service, path)
      sc.serve_forever()


#_____________________________________________________________________________
if __name__ == '__main__':

    parser = optparse.OptionParser()
    parser.add_option("-p", 
                      "--port", 
                      dest="port",
                      type="int",
                      default=5100,
                      help="specify a port number to override the default")

    parser.add_option("-f", 
                      "--log-file",
                      dest="logFilePath",
                      help=\
                "file path for log file to log to - default is $NDG_DIR/log")

    parser.add_option("-d", 
                      "--debug",
                      dest="debug",
                      action="store_true",
                      default=False,
                      help="set to stop in debugger on receipt of WS request")

    (options, args) = parser.parse_args()


    # Create server instance at start up
    try:
        logSrv = Log(logFilePath=options.logFilePath)

    except Exception, e:
        sys.stderr.write("Initialising Logging: %s\n" % str(e))
        sys.exit(1)
    
    print "Logging Server listening..."
    try:
         AsServer(port=options.port, 
                  services=[log(logSrv, debug=options.debug)], 
                  RequestHandlerClass=LogSOAPRequestHandler)

    except KeyboardInterrupt:
        sys.exit(0)

    except socket.error, e:
        sys.stderr.write("Logging Server socket error: %s\n" % \
                         e[1])
        sys.exit(1)
        
    except Exception, e:
        sys.stderr.write("Logging Server: %s\n" % str(e))
        sys.exit(1)
        
