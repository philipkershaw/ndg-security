#
# PasteDeploy ini file for Session Manager Unit tests 
# 
# NERC Data Grid Project
# 
# P J Kershaw 01/10/08
# 
# Copyright (C) 2009 Science and Technology Facilities Council
# 
# BSD - See LICENCE file for details

[DEFAULT]
# WS-Security settings in THIS file to enable the Signature Handler to verify
# incoming messages and sign outbound messages.  
wsseCfgFilePath = %(here)s/session-manager.ini
wsseCfgFileSection = WS-Security

# Session Manager specific settings - commented out settings will take their
# default settings.  To override the defaults uncomment and set as required.
# See ndg.security.server.sessionmanager module for details

# Flag for SSL - set to something to stipulate http, leave blank to use http 
#sessionManager.useSSL: 

# X.509 certificate for SSL connections - ignored if useSSL is blank 
#sessionManager.sslCertFile: 

# Private key file for SSL  - ignored if useSSL is blank 
#sessionManager.sslKeyFile: 

# Directory containing CA cert.s to verify SSL peer cert against - ignored if 
# useSSL is blank 
#sessionManager.sslCACertDir: $NDGSEC_TEST_CONFIG_DIR/ca

# Credential Wallet Settings - global to all user sessions
#
# CA certificates for Attribute Certificate signature validation
sessionManager.credentialWallet.caCertFilePathList=$NDGSEC_TEST_CONFIG_DIR/ca/ndg-test-ca.crt

# CA certificates for SSL connection peer cert. validation - required if
# connecting to an Attribute Authority over SSL
sessionManager.credentialWallet.sslCACertFilePathList=$NDGSEC_TEST_CONFIG_DIR/ca/ndg-test-ca.crt

# Allow Get Attribute Certificate calls to try to get a mapped certificate
# from another organisation trusted by the target Attribute Authority
sessionManager.credentialWallet.mapFromTrustedHosts=True
sessionManager.credentialWallet.rtnExtAttCertList=True

# Refresh an Attribute Certificate, if an existing one in the wallet has only
# this length of time left before it expires
credentialWallet.attCertRefreshElapse=7200

# Pointer to WS-Security settings.  These WS-Security settings are for use
# by user credential wallets held in user sessions hosted by the Session
# Manager.  They enable individual wallets to query Attribute Authorities for
# user Attribute Certificates.  Nb. the difference between these settings and
# the WS-Security section for handling requests to the Session Manager.
#
# Settings are identified by a prefix.  
sessionManager.credentialWallet.wssCfgPrefix=sessionManager.credentialWallet.wssecurity

# ...A section name could also be used.
#sessionManager.credentialWallet.wssCfgSection=

# SOAP Signature Handler settings for the Credential Wallet's Attribute 
# Authority interface
#
# CA Certificates used to verify X.509 certs used in Attribute Certificates.
# The CA certificates of other NDG trusted sites should go here.  NB, multiple
# values should be delimited by a space
sessionManager.credentialWallet.wssecurity.caCertFilePathList: $NDGSEC_TEST_CONFIG_DIR/ca/ndg-test-ca.crt

# Signature of an outbound message
#
# Certificate associated with private key used to sign a message.  The sign 
# method will add this to the BinarySecurityToken element of the WSSE header.  
# binSecTokValType attribute must be set to 'X509' or 'X509v3' ValueType.  
# As an alternative, use signingCertChain - see below...

# PEM encoded cert
sessionManager.credentialWallet.wssecurity.signingCertFilePath: %(here)s/sm.crt

# ... or provide file path to PEM encoded private key file
sessionManager.credentialWallet.wssecurity.signingPriKeyFilePath: %(here)s/sm.key

# Set the ValueType for the BinarySecurityToken added to the WSSE header for a
# signed message.  See __setReqBinSecTokValType method and binSecTokValType 
# class variable for options - it may be one of X509, X509v3, X509PKIPathv1 or 
# give full namespace to alternative - see 
# ZSI.wstools.Namespaces.OASIS.X509TOKEN
#
# binSecTokValType determines whether signingCert or signingCertChain 
# attributes will be used.
sessionManager.credentialWallet.wssecurity.reqBinSecTokValType: X509v3

# Add a timestamp element to an outbound message
sessionManager.credentialWallet.wssecurity.addTimestamp: True

# Authentication service properties 
sessionManager.authNService.moduleFilePath: 
sessionManager.authNService.moduleName: ndg.security.test.config.sessionmanager.userx509certauthn
sessionManager.authNService.className: UserX509CertAuthN

# Specific settings for UserCertAuthN Session Manager authentication plugin
# This sets up PKI credentials for a single test account
sessionManager.authNService.userX509CertFilePath: $NDGSEC_TEST_CONFIG_DIR/pki/user.crt
sessionManager.authNService.userPriKeyFilePath: $NDGSEC_TEST_CONFIG_DIR/pki/user.key
sessionManager.authNService.userPriKeyPwd: testpassword

# Settings for the Credential Repository - NullCredRepos is 
#sessionManager.credentialRepository.modFilePath: 
#sessionManager.credentialRepository.modName: ndg.security.common.CredWallet
#sessionManager.credentialRepository.className: NullCredRepos
#sessionManager.credentialRepository.propFile:

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 5500

[app:mainApp]
paste.app_factory = ndg.security.test.config.sessionmanager.sessionManagerServerApp:app_factory

# Chain of SOAP Middleware filters
[pipeline:main]
pipeline = wsseSignatureVerificationFilter 
           SessionManagerFilter 
           wsseSignatureFilter 
           mainApp


[filter:SessionManagerFilter]
paste.filter_app_factory = ndg.security.server.wsgi.zsi:SOAPBindingMiddleware.filter_app_factory
serviceSOAPBindingClass = ndg.security.server.zsi.sessionmanager.SessionManagerWS
serviceSOAPBindingPropPrefix = sessionmanager.service.soap.binding.
sessionmanager.service.soap.binding.propPrefix = sessionManager
sessionmanager.service.soap.binding.propFilePath = %(here)s/session-manager.ini
sessionmanager.service.soap.binding.wsseSignatureVerificationFilterID = wsseSignatureVerificationFilter01
referencedFilters = wsseSignatureVerificationFilter01
path = /SessionManager
enableWSDLQuery = True
charset = utf-8


[filter:wsseSignatureVerificationFilter]
paste.filter_app_factory = ndg.security.server.wsgi.wssecurity:SignatureVerificationFilter.filter_app_factory
filterID = wsseSignatureVerificationFilter01

# Settings for WS-Security SignatureHandler class used by this filter
wsseCfgFilePrefix = wssecurity

# Verify against known CAs - Provide a space separated list of file paths
wssecurity.caCertFilePathList=$NDGSEC_TEST_CONFIG_DIR/ca/ndg-test-ca.crt

[filter:wsseSignatureFilter]
paste.filter_app_factory = ndg.security.server.wsgi.wssecurity:ApplySignatureFilter.filter_app_factory

# Reference the verification filter in order to be able to apply signature
# confirmation
referencedFilters = wsseSignatureVerificationFilter01
wsseSignatureVerificationFilterID = wsseSignatureVerificationFilter01

# Last filter in chain SOAP handlers writes the response
writeResponse = True

# Settings for WS-Security SignatureHandler class used by this filter
wsseCfgFilePrefix = wssecurity

# Certificate associated with private key used to sign a message.  The sign 
# method will add this to the BinarySecurityToken element of the WSSE header.  
wssecurity.signingCertFilePath=%(here)s/sm.crt

# PEM encoded private key file
wssecurity.signingPriKeyFilePath=%(here)s/sm.key

# Set the ValueType for the BinarySecurityToken added to the WSSE header for a
# signed message.  See __setReqBinSecTokValType method and binSecTokValType 
# class variable for options - it may be one of X509, X509v3, X509PKIPathv1 or 
# give full namespace to alternative - see 
# ZSI.wstools.Namespaces.OASIS.X509TOKEN
#
# binSecTokValType determines whether signingCert or signingCertChain 
# attributes will be used.
wssecurity.reqBinSecTokValType=X509v3

# Add a timestamp element to an outbound message
wssecurity.addTimestamp=True

# For WSSE 1.1 - service returns signature confirmation containing signature 
# value sent by client
wssecurity.applySignatureConfirmation=True

# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_ndg]
level = DEBUG
handlers =
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
