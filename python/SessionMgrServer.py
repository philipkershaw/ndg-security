#!/usr/bin/env python

"""NDG Session Manager Web Services server interface

NERC Data Grid Project

P J Kershaw 16/08/05

Copyright (C) 2005 CCLRC & NERC

This software may be distributed under the terms of the Q Public License,
version 1.0 or later.
"""

cvsID = '$Id$'

# Handle socket errors from WS
import socket 

# Command line processing
import sys
import os
import getopt

# Web service interface
from ZSI import dispatch
from ZSI.ServiceContainer import ServiceContainer, SOAPRequestHandler

# Session Manager Web Services stub code generated by wsdl2py and 
# wsdl2dispatch
from NDG.sessionMgr_services import *
from NDG.sessionMgr_services_server import sessionMgr

# Session Manager
from NDG.Session import *


#_____________________________________________________________________________
class SessionMgrSOAPRequestHandler(SOAPRequestHandler):
     """Add a do_GET method to return the WSDL on HTTP GET requests.
     Please note that the path to the wsdl file is derived from what
     the HTTP invocation delivers (which is put into the self.path
     attribute), so you might want to change this addressing scheme.
     """
     def do_GET(self):
         """Return the WSDL file."""
         
         wsdlfile = "/var/www/html/sessionMgr.wsdl"
         
         print "> > > > > using wsdlfile", wsdlfile
         wsdl = open(wsdlfile).read()
         self.send_xml(wsdl)
 
     def do_POST(self):
          """Fudge to get _Dispatch to pick up the correct address
          - seems to be necessary when putting proxy redirect for port in
          the wsdl e.g. http://glue.badc.rl.ac.uk/sessionMgr points to the
          default port for the Session Manager."""
          self.path = "/sessionMgr.wsdl"
          SOAPRequestHandler.do_POST(self)
	   
	   
#_____________________________________________________________________________
# Copied from ZSI.ServiceContainer, extended to instantiate with a custom
# request handler
def AsServer(port=80, services=(), RequestHandlerClass=SOAPRequestHandler):
      """port --
          services -- list of service instances
       """
      address = ("", port)
      sc = ServiceContainer(address, RequestHandlerClass=RequestHandlerClass)
      for service in services:
           path = service.getPost()
           sc.setNode(service, path)
      sc.serve_forever()


#_____________________________________________________________________________
def usage(fp=sys.stdout):
    """Describes how to call SessionMgrServer from the command line"""
    fp.write("usage: %s \n" % sys.argv[0].split(os.sep)[-1])
    fp.write("""    
[-h | --help]
    print usage summary
    
[-f <properties file path> | --file=<properties file path>]

[-p <port #> | --port=<port #>]
    port number for server to listen on

[-d | --debug]
    set to stop in debugger on receipt of WS request
    
[-n | --nopassphrase]
    skip the prompt for the database pass-phrase.  In this case, the
    pass-phrase must be set in the 'dbURI' tag in the configuration file.
    
[-w | --nowsdlencrkey]
    skip the prompt for the WSDL encryption key and pick up the key from the 
    'sessMgrWSDLkey' tag in the configuration file.
""")

#_____________________________________________________________________________
if __name__ == '__main__':

    try:
        optLongNames = [ "help", 
                         "file=", 
                         "port=", 
                         "debug", 
                         "nopassphrase",
                         "nowsdlencrkey"]
        opts, args = getopt.getopt(sys.argv[1:], "hf:p:dnw", optLongNames)

    except getopt.GetoptError, e:
        sys.stderr.write("Error: %s\n\n" % e)
        usage(fp=sys.stderr)
        sys.exit(1)


    propFilePath = None
    port = 5700 #80 # temporary port for testing
    debug = False
    noPPhrase = False
    noWSDLencrKey = False
    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)

        elif opt in ("-d", "--debug"):
            debug = True

        elif opt in ("-f", "--file"):
            propFilePath = arg

        elif opt in ("-p", "--port"):
            port = int(arg)

        elif opt in ("-n", "--nopassphrase"):
            noPPhrase = True

        elif opt in ("-w", "--nowsdlencrkey"):
            noWSDLencrKey = True

        else:
            sys.stderr.write("Option not recognised: %s" % opt)
            usage(fp=sys.stderr)
            sys.exit(1)


    if propFilePath is None:
        # Check in installation area otherwise assume local directory
        if 'NDG_DIR' in os.environ:
            propFileDir = os.path.join(os.environ['NDG_DIR'], "conf")
        else:
            propFileDir = "."

        propFilePath = os.path.join(propFileDir, 'sessionMgrProperties.xml')


    if noPPhrase is False:
        import getpass
        try:
            credReposPPhrase = getpass.getpass(\
                                prompt="Credential Repository pass-phrase: ")
        except KeyboardInterrupt:
            sys.exit(1)
    else:
        credReposPPhrase = None


    if noWSDLencrKey is False:
        import getpass
        try:
            sessMgrWSDLkey = getpass.getpass(prompt="WSDL Encryption Key: ")
        except KeyboardInterrupt:
            sys.exit(1)
    else:
        sessMgrWSDLkey = None


    # Create server instance at start up
#    import pdb
#    pdb.set_trace()
    try:
        sm = SessionMgr(propFilePath,
                        credReposPPhrase=credReposPPhrase,
                        sessMgrWSDLkey=sessMgrWSDLkey)

    except Exception, e:
        sys.stderr.write("Initialising Session Manager: %s\n" % e)
        sys.exit(1)

    print "Session Manager Server listening..."
    try:
         AsServer(port=port, 
                  services=(sessionMgr(sm, debug=debug),), 
                  RequestHandlerClass=SessionMgrSOAPRequestHandler)

    except KeyboardInterrupt:
        sys.exit(0)

    except socket.error, e:
        sys.stderr.write("Session Manager Server socket error: %s\n" % \
                         e[1])
        sys.exit(1)

    except Exception, e:
        sys.stderr.write("Session Manager Server: %s\n" % e)
        sys.exit(1)
        
             
