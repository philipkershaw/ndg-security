################################################## 
# SessionMgr_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:ndg:security:sessionMgr
##############################

class ns0:
    targetNamespace = "urn:ndg:security:sessionMgr"

    class getSessionStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSessionStatus"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.getSessionStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="userDN", aname="_userDN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessID", aname="_sessID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","getSessionStatus")
            kw["aname"] = "_getSessionStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userDN = None
                    self._sessID = None
                    return
            Holder.__name__ = "getSessionStatus_Holder"
            self.pyclass = Holder

    class getSessionStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSessionStatusResponse"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.getSessionStatusResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="isAlive", aname="_isAlive", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","getSessionStatusResponse")
            kw["aname"] = "_getSessionStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isAlive = None
                    return
            Holder.__name__ = "getSessionStatusResponse_Holder"
            self.pyclass = Holder

    class connect_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "connect"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.connect_Dec.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="passphrase", aname="_passphrase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="createServerSess", aname="_createServerSess", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","connect")
            kw["aname"] = "_connect"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._passphrase = None
                    self._createServerSess = None
                    return
            Holder.__name__ = "connect_Holder"
            self.pyclass = Holder

    class connectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "connectResponse"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.connectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="userCert", aname="_userCert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userPriKey", aname="_userPriKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issuingCert", aname="_issuingCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessID", aname="_sessID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","connectResponse")
            kw["aname"] = "_connectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userCert = None
                    self._userPriKey = None
                    self._issuingCert = None
                    self._sessID = None
                    return
            Holder.__name__ = "connectResponse_Holder"
            self.pyclass = Holder

    class disconnect_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "disconnect"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.disconnect_Dec.schema
            TClist = [ZSI.TC.String(pname="userCert", aname="_userCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessID", aname="_sessID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","disconnect")
            kw["aname"] = "_disconnect"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userCert = None
                    self._sessID = None
                    return
            Holder.__name__ = "disconnect_Holder"
            self.pyclass = Holder

    class disconnectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "disconnectResponse"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.disconnectResponse_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security:sessionMgr","disconnectResponse")
            kw["aname"] = "_disconnectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "disconnectResponse_Holder"
            self.pyclass = Holder

    class getAttCert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAttCert"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.getAttCert_Dec.schema
            TClist = [ZSI.TC.String(pname="userCert", aname="_userCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessID", aname="_sessID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="attAuthorityURI", aname="_attAuthorityURI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="attAuthorityCert", aname="_attAuthorityCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqRole", aname="_reqRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="mapFromTrustedHosts", aname="_mapFromTrustedHosts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="rtnExtAttCertList", aname="_rtnExtAttCertList", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extAttCert", aname="_extAttCert", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extTrustedHost", aname="_extTrustedHost", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","getAttCert")
            kw["aname"] = "_getAttCert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userCert = None
                    self._sessID = None
                    self._attAuthorityURI = None
                    self._attAuthorityCert = None
                    self._reqRole = None
                    self._mapFromTrustedHosts = None
                    self._rtnExtAttCertList = None
                    self._extAttCert = []
                    self._extTrustedHost = []
                    return
            Holder.__name__ = "getAttCert_Holder"
            self.pyclass = Holder

    class getAttCertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAttCertResponse"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.getAttCertResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="attCert", aname="_attCert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="msg", aname="_msg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extAttCertOut", aname="_extAttCertOut", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","getAttCertResponse")
            kw["aname"] = "_getAttCertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._attCert = None
                    self._msg = None
                    self._extAttCertOut = []
                    return
            Holder.__name__ = "getAttCertResponse_Holder"
            self.pyclass = Holder

    class getX509Cert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getX509Cert"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.getX509Cert_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security:sessionMgr","getX509Cert")
            kw["aname"] = "_getX509Cert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getX509Cert_Holder"
            self.pyclass = Holder

    class getX509CertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getX509CertResponse"
        schema = "urn:ndg:security:sessionMgr"
        def __init__(self, **kw):
            ns = ns0.getX509CertResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="x509Cert", aname="_x509Cert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:sessionMgr","getX509CertResponse")
            kw["aname"] = "_getX509CertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._x509Cert = None
                    return
            Holder.__name__ = "getX509CertResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:ndg:security:sessionMgr)
