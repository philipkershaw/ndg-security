#
# Description: Paster ini file for SAML Attribute Service
# 
# NERC Data Grid Project
# 
# Author: P J Kershaw
#
# Date: 12/09/08
# 
# Copyright (C) 2010 Science and Technology Facilities Council
# 
# BSD - See LICENCE file for details

[DEFAULT]
attributeAuthorityEnvironKeyName = attribute-authority
attributeQueryInterfaceEnvironKeyName = attributeQueryInterface

# This is set to a test SQLite database alter as needed
dbConnectionString = sqlite:///%(here)s/user.db

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = %%{portNumber}

[app:AttributeAuthorityStaticContent]
use = egg:Paste#static
document_root = %(here)s/public

# Chain of Middleware filters
[pipeline:main]
pipeline = AttributeAuthorityFilter AttributeAuthoritySamlSoapBindingFilter AttributeAuthorityStaticContent


[filter:AttributeAuthorityFilter]
paste.filter_app_factory = ndg.security.server.wsgi.attributeauthority:AttributeAuthorityMiddleware.filter_app_factory
prefix = attributeAuthority.

# Key name by which the WSDL SOAP based interface may reference this
# service
attributeAuthority.environKeyName = %(attributeAuthorityEnvironKeyName)s

# Key name for the SAML SOAP binding based interface to reference this
# service's attribute query method
attributeAuthority.environKeyNameAttributeQueryInterface: %(attributeQueryInterfaceEnvironKeyName)s

# Attribute Authority settings...

# Lifetime is measured in seconds
attributeAuthority.assertionLifetime: 28800 

# Attribute Interface - determines how a given attribute query interfaces with a
# backend database or other persistent store.  The one here is an SQLAlchemy
# based one.  The database connection string is the global setting - see the 
# DEFAULT section. 
attributeAuthority.attributeInterface.className: ndg.security.server.attributeauthority.SQLAlchemyAttributeInterface
attributeAuthority.attributeInterface.connectionString: %(dbConnectionString)s

# This does a sanity check to ensure the subject of the query is known to this
# authority.
attributeAuthority.attributeInterface.samlSubjectSqlQuery = select count(*) from users where openid = '${userId}'

# Map the given SAML attributes identifiers to the equivalent SQL query to 
# retrieve them.  Any number can be set.  They should have the form,
#
# attributeAuthority.attributeInterface.samlAttribute2SqlQuery.<id>
#
# where <id> can be any unique string.  The userId string is the value passed
# from the client subject NameID field.  Each value consists of double quoted
# space delimited entries.  The first entry is the attribute type, the second
# is the SQL query needed to retrieve the attributes for the given type and 
# used id.  A third entry may be added to specify a conversion routine which
# converts the retrieved attribute value(s) into a SAML Attribute Value instance.
# If this omitted, then the retrieved value is converted by default into an 
# xs:string type.  All the options below are set to do this apart from the last
# which uses a special test routine to convert to the ESGF Group/Role Attribute
# Value type
attributeAuthority.attributeInterface.samlAttribute2SqlQuery.1 = "urn:esg:first:name" "select firstname from users where openid = '${userId}'"
attributeAuthority.attributeInterface.samlAttribute2SqlQuery.lastName = "urn:esg:last:name" "select lastname from users where openid = '${userId}'"
attributeAuthority.attributeInterface.samlAttribute2SqlQuery.emailAddress = "urn:esg:email:address" "select emailaddress from users where openid = '${userId}'"
attributeAuthority.attributeInterface.samlAttribute2SqlQuery.4 = "urn:siteA:security:authz:1.0:attr" "select attributename from attributes where attributetype = 'urn:siteA:security:authz:1.0:attr' and openid = '${userId}'"
attributeAuthority.attributeInterface.samlAttribute2SqlQuery.esgGroupRole = 
	"urn:esg:sitea:grouprole" "select attributename from attributes where attributetype = 'urn:esg:sitea:grouprole' and openid = '${userId}'" "ndg.security.test.unit.dbAttr2ESGFGroupRole"

# Set the permissable requestor Distinguished Names as set in the SAML client 
# query issuer field.  Comment out or remove if this is not required.  Nb.
# filtering of clients can be more securely applied by whitelisting at the SSL
# level.
attributeAuthority.attributeInterface.samlValidRequestorDNs = /O=Site A/CN=Authorisation Service,/O=Site A/CN=Attribute Authority,
                           				   /O=Site B/CN=Authorisation Service, 
                           				   /CN=test/O=NDG/OU=BADC,
                           				   /O=NDG/OU=Security/CN=localhost

# Alternative test AttributeInterface class.  This uses fixed parameter values 
# instead of a database
#attributeAuthority.attributeInterface.modFilePath: %(here)s
#attributeAuthority.attributeInterface.className: sitea_attributeinterface.TestUserRoles

# SAML SOAP Binding to the Attribute Authority
[filter:AttributeAuthoritySamlSoapBindingFilter]
paste.filter_app_factory = ndg.saml.saml2.binding.soap.server.wsgi.queryinterface:SOAPQueryInterfaceMiddleware.filter_app_factory
prefix = saml.soapbinding.

saml.soapbinding.deserialise = ndg.saml.xml.etree:AttributeQueryElementTree.fromXML

# Specialisation to incorporate ESG Group/Role type
saml.soapbinding.serialise = ndg.security.common.saml_utils.esgf.xml.etree:ESGFResponseElementTree.toXML

# Otherwise use default
#saml.soapbinding.serialise = ndg.saml.xml.etree:AttributeQueryElementTree.toXML

saml.soapbinding.mountPath = %%{mountPath}
saml.soapbinding.queryInterfaceKeyName = %(attributeQueryInterfaceEnvironKeyName)s

# Clock skew for SAML Attribute Queries - allow clockSkew number of seconds
# tolerance for query issueInstant parameter. Set here to 3 minutes
saml.soapbinding.clockSkewTolerance: 180.0

saml.soapbinding.issuerName = %%{issuerName}
saml.soapbinding.issuerFormat = %%{issuerFormat}

# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console, logfile

[formatters]
keys = generic

[logger_root]
level = DEBUG
handlers = console, logfile

[logger_ndg]
level = DEBUG
handlers = 
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-8.8s [%(name)s:%(lineno)d] %(message)s
datefmt = %Y/%m/%d %H:%M:%S

[handler_logfile]
class = handlers.RotatingFileHandler
level=NOTSET
formatter=generic
args=(os.path.join('%%{outputDir}', 'log', 'service.log'), 'a', 10000, 2)
