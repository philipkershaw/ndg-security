#
# NERC DataGrid Security
#
# Description: Paste configuration for OpenID Provider standalone service
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# Author: 	P J Kershaw
#
# Date: 	01/07/09
#
# Copyright: (C) 2010 Science and Technology Facilities Council
# license: BSD - see LICENSE file in top-level directory
# Contact: Philip.Kershaw@stfc.ac.uk
# Revision: $Id$

[DEFAULT]
portNum = 7443
hostname = localhost
scheme = https
baseURI = %(scheme)s://%(hostname)s:%(portNum)s
openIDProviderIDBase = /openid
openIDProviderIDSelectURI = %(baseURI)s%(openIDProviderIDBase)s
testConfigDir = %(here)s/../../config
beakerSessionKeyName = beaker.session.ndg.security.services

dbConnectionString = sqlite:///%(testConfigDir)s/user.db

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = %(portNum)s

# Use composite cascade construct to enable Provider app to pick up static 
# content  
[filter-app:OpenIDProviderFilterApp]
use = egg:Paste#httpexceptions
next = cascade

# Composite for OpenID Provider to enable settings for picking up static 
# content
[composit:cascade]
use = egg:Paste#cascade
app1 = OpenIDProviderApp
app2 = OpenIDProviderStaticContent
catch = 404

[app:OpenIDProviderStaticContent]
use = egg:Paste#static
document_root = %(here)s/public

# Ordering of filters and app is critical
[pipeline:main]
pipeline = SessionMiddlewareFilter OpenIDProviderFilterApp

#______________________________________________________________________________
# Beaker Session Middleware (used by OpenID Provider Application)
[filter:SessionMiddlewareFilter]
paste.filter_app_factory=beaker.middleware:SessionMiddleware
beaker.session.key = openid
beaker.session.secret = BIRbpRp7gkoXCEfZtZcNsPj+X0wO+Sxd

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
beaker.cache.data_dir = %(here)s/beaker/cache
beaker.session.data_dir = %(here)s/beaker/sessions
beaker.session.cookie_expires = True

#beaker.session.cookie_domain = .localhost

# Key name for keying into environ dictionary
environ_key = %(beakerSessionKeyName)s

#______________________________________________________________________________
# OpenID Provider WSGI Settings
[app:OpenIDProviderApp]
paste.app_factory=ndg.security.server.wsgi.openid.provider:OpenIDProviderMiddleware.app_factory

openid.provider.path.openidserver=/OpenID/Provider/server
openid.provider.path.login=/OpenID/Provider/login
openid.provider.path.loginsubmit=/OpenID/Provider/loginsubmit

# Yadis based discovery only - the 'id' path is configured may be set to page
# with <link rel="openid.server" href="..."> and Yadis 
# <meta http-equiv="x-xrds-location" content="..."> links if required but in 
# this implementation it set to return 404 not found - see 
# ndg.security.server.wsgi.openid.provider.renderinginterface.genshi.GenshiRendering 
# class
openid.provider.path.id=/OpenID/Provider/id/${userIdentifier}
openid.provider.path.yadis=%(openIDProviderIDBase)s/${userIdentifier}

# Yadis based discovery for idselect mode - this is where the user has entered
# a URI at the Relying Party which identifies their Provider only and not their
# full ID URI.  e.g. https://badc.nerc.ac.uk instead of 
# https://badc.nerc.ac.uk/John
openid.provider.path.serveryadis=%(openIDProviderIDBase)s
openid.provider.path.allow=/OpenID/Provider/allow
openid.provider.path.decide=/OpenID/Provider/decide
openid.provider.path.mainpage=/OpenID/Provider/home

openid.provider.session_middleware=%(beakerSessionKeyName)s
openid.provider.base_url=%(baseURI)s

# Enable login to construct an identity URI if IDSelect mode was chosen and
# no identity URI was passed from the Relying Party.  This value should
# match openid.provider.path.id and/or openid.provider.path.yadis - see above
identityUriTemplate=%(baseURI)s%(openIDProviderIDBase)s/${userIdentifier}

openid.provider.trace=False
openid.provider.consumer_store_dirpath=%(here)s
openid.provider.renderingClass=ndg.security.server.wsgi.openid.provider.renderinginterface.genshi.GenshiRendering
#openid.provider.renderingClass=ndg.security.server.wsgi.openid.provider.DemoRenderingInterface

# Templates
openid.provider.rendering.templateRootDir = %(here)s/templates

# Layout
openid.provider.rendering.baseURL = %(openid.provider.base_url)s
openid.provider.rendering.helpIcon = %(openid.provider.rendering.baseURL)s/layout/icons/help.png
openid.provider.rendering.footerText = This site is for test purposes only.
openid.provider.rendering.rightLink = http://ceda.ac.uk/
openid.provider.rendering.rightImage = %(openid.provider.rendering.baseURL)s/layout/CEDA_RightButton60.png
openid.provider.rendering.rightAlt = Centre for Environmental Data Archival

# Basic Authentication interface to demonstrate capabilities
#openid.provider.authNInterface=ndg.security.server.wsgi.openid.provider.authninterface.basic.BasicAuthNInterface
openid.provider.authNInterface=ndg.security.server.wsgi.openid.provider.authninterface.sqlalchemy_authn.SQLAlchemyAuthnInterface
openid.provider.authN.connectionString=%(dbConnectionString)s
openid.provider.authN.logonSqlQuery=select count(*) from users where username = '${username}' and md5password = '${password}'
openid.provider.authN.username2UserIdentifierSqlQuery=select openid_identifier from users where username = '${username}'
openid.provider.authN.isMD5EncodedPwd=True

# user login details format is:
# <username>:<password>:<OpenID name>, ... <OpenID name N> <username>:... etc
# Each user entry is delimited by a space. username, password and OpenID name
# list are delimited by a colon.  The list of OpenID names are delimited by
# commas.  The OpenID name represents the unique part of the OpenID URL for the
# individual user.  Each username may have more than one OpenID alias but only
# alias at a time may be registered with a given Attribute Authority
openid.provider.authN.userCreds=pjk:testpassword:PhilipKershaw,P.J.Kershaw another:testpassword:A.N.Other

# Basic authentication for testing/admin - comma delimited list of 
# <username>:<password> pairs
#openid.provider.usercreds=pjk:test

# Attribute Exchange interface
#openid.provider.axResponse.class=ndg.security.server.wsgi.openid.provider.axinterface.csv.CSVFileAXInterface
#openid.provider.axResponse.csvFilePath=%(here)s/attributeexchange.csv
openid.provider.axResponse.class=ndg.security.server.wsgi.openid.provider.axinterface.sqlalchemy_ax.SQLAlchemyAXInterface
openid.provider.axResponse.connectionString=%(dbConnectionString)s
openid.provider.axResponse.sqlQuery = select firstname, lastname, emailaddress from users where username = '${username}'
openid.provider.axResponse.attributeNames=http://openid.net/schema/namePerson/first
    http://openid.net/schema/namePerson/last
    http://openid.net/schema/contact/internet/email
    
openid.provider.trustedRelyingParties=https://localhost:7443, https://ndg.somewhere.ac.uk,
	https://badc.somewhere.ac.uk

# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console, logfile

[formatters]
keys = console, generic

[logger_root]
level = INFO
handlers = console

[logger_ndg]
level = DEBUG
handlers =
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = console

[handler_logfile]
class = handlers.RotatingFileHandler
level=NOTSET
formatter=generic
args=(os.path.join('%(here)s', 'log', 'service.log'), 'a', 100000, 10)

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-7.7s [%(name)s:%(lineno)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S

# Skip date / time for this output as system logs picks up stderr and timestamps
# it anyway
[formatter_console]
format = %(levelname)-5.5s [%(name)s:%(lineno)s] %(message)s
