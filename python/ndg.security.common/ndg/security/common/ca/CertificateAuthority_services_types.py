################################################## 
# CertificateAuthority_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:ndg:security:ca
##############################

class ns0:
    targetNamespace = "urn:ndg:security:ca"

    class issueCert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "issueCert"
        schema = "urn:ndg:security:ca"
        def __init__(self, **kw):
            ns = ns0.issueCert_Dec.schema
            TClist = [ZSI.TC.String(pname="x509CertReq", aname="_x509CertReq", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:ca","issueCert")
            kw["aname"] = "_issueCert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._x509CertReq = None
                    return
            Holder.__name__ = "issueCert_Holder"
            self.pyclass = Holder

    class issueCertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "issueCertResponse"
        schema = "urn:ndg:security:ca"
        def __init__(self, **kw):
            ns = ns0.issueCertResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="x509Cert", aname="_x509Cert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:ca","issueCertResponse")
            kw["aname"] = "_issueCertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._x509Cert = None
                    return
            Holder.__name__ = "issueCertResponse_Holder"
            self.pyclass = Holder

    class revokeCert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "revokeCert"
        schema = "urn:ndg:security:ca"
        def __init__(self, **kw):
            ns = ns0.revokeCert_Dec.schema
            TClist = [ZSI.TC.String(pname="x509Cert", aname="_x509Cert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:ca","revokeCert")
            kw["aname"] = "_revokeCert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._x509Cert = None
                    return
            Holder.__name__ = "revokeCert_Holder"
            self.pyclass = Holder

    class revokeCertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "revokeCertResponse"
        schema = "urn:ndg:security:ca"
        def __init__(self, **kw):
            ns = ns0.revokeCertResponse_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security:ca","revokeCertResponse")
            kw["aname"] = "_revokeCertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "revokeCertResponse_Holder"
            self.pyclass = Holder

    class getCRL_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCRL"
        schema = "urn:ndg:security:ca"
        def __init__(self, **kw):
            ns = ns0.getCRL_Dec.schema
            TClist = []
            kw["pname"] = ("urn:ndg:security:ca","getCRL")
            kw["aname"] = "_getCRL"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getCRL_Holder"
            self.pyclass = Holder

    class getCRLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCRLResponse"
        schema = "urn:ndg:security:ca"
        def __init__(self, **kw):
            ns = ns0.getCRLResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="crl", aname="_crl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ndg:security:ca","getCRLResponse")
            kw["aname"] = "_getCRLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._crl = None
                    return
            Holder.__name__ = "getCRLResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:ndg:security:ca)
