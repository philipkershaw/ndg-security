################################################## 
# sessionMgr_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class sessionMgrServiceInterface:
    def getsessionMgr(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class sessionMgrServiceLocator(sessionMgrServiceInterface):
    sessionMgr_address = "http://127.0.0.1:5700/sessionMgr.wsdl"
    def getsessionMgrAddress(self):
        return sessionMgrServiceLocator.sessionMgr_address

    def getsessionMgr(self, portAddress=None, **kw):
        return sessionMgrBindingSOAP(portAddress or sessionMgrServiceLocator.sessionMgr_address, **kw)


class sessionMgrBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def addUser(self, request):
        """
        @param: request to addUserRequest::
          _passPhrase: str
          _userName: str

        @return: response from addUserResponse::
          _errMsg: str
        """

        if not isinstance(request, addUserRequest) and\
            not issubclass(addUserRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:sessionMgr#addUser", **kw)
        response = self.binding.Receive(addUserResponseWrapper())
        if not isinstance(response, addUserResponse) and\
            not issubclass(addUserResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def connect(self, request):
        """
        @param: request to connectRequest::
          _passPhrase: str
          _rtnAsCookie: boolean
          _userName: str

        @return: response from connectResponse::
          _cookie: str
          _errMsg: str
          _expiry: str
          _sessID: str
        """

        if not isinstance(request, connectRequest) and\
            not issubclass(connectRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:sessionMgr#connect", **kw)
        response = self.binding.Receive(connectResponseWrapper())
        if not isinstance(response, connectResponse) and\
            not issubclass(connectResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def reqAuthorisation(self, request):
        """
        @param: request to reqAuthorisationRequest::
          _aaWSDL: str
          _extAttCertList: Any
          _extTrustedHostList: Any
          _mapFromTrustedHosts: boolean
          _reqRole: str
          _sessID: str

        @return: response from reqAuthorisationResponse::
          _attCert: str
          _errMsg: str
          _extAttCertList: Any
          _statCode: str
        """

        if not isinstance(request, reqAuthorisationRequest) and\
            not issubclass(reqAuthorisationRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:sessionMgr#reqAuthorisation", **kw)
        response = self.binding.Receive(reqAuthorisationResponseWrapper())
        if not isinstance(response, reqAuthorisationResponse) and\
            not issubclass(reqAuthorisationResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class addUserRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._userName = None
        self._passPhrase = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, addUserRequest, [ZSI.TC.String(pname="userName",aname="_userName",optional=1),ZSI.TC.String(pname="passPhrase",aname="_passPhrase",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class addUserRequestWrapper(addUserRequest):
    """wrapper for rpc:encoded message"""

    typecode = addUserRequest(name='addUser', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        addUserRequest.__init__( self, name='addUser', ns='urn:sessionMgr' )

class addUserResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, addUserResponse, [ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class addUserResponseWrapper(addUserResponse):
    """wrapper for rpc:encoded message"""

    typecode = addUserResponse(name='addUserResponse', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        addUserResponse.__init__( self, name='addUserResponse', ns='urn:sessionMgr' )

class connectRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._userName = None
        self._passPhrase = None
        self._rtnAsCookie = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, connectRequest, [ZSI.TC.String(pname="userName",aname="_userName",optional=1),ZSI.TC.String(pname="passPhrase",aname="_passPhrase",optional=1),ZSI.TC.Boolean(pname="rtnAsCookie",aname="_rtnAsCookie",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class connectRequestWrapper(connectRequest):
    """wrapper for rpc:encoded message"""

    typecode = connectRequest(name='connect', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        connectRequest.__init__( self, name='connect', ns='urn:sessionMgr' )

class connectResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._sessID = None
        self._expiry = None
        self._cookie = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, connectResponse, [ZSI.TC.String(pname="sessID",aname="_sessID",optional=1),ZSI.TC.String(pname="expiry",aname="_expiry",optional=1),ZSI.TC.String(pname="cookie",aname="_cookie",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class connectResponseWrapper(connectResponse):
    """wrapper for rpc:encoded message"""

    typecode = connectResponse(name='connectResponse', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        connectResponse.__init__( self, name='connectResponse', ns='urn:sessionMgr' )

class reqAuthorisationRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._aaWSDL = None
        self._sessID = None
        self._reqRole = None
        self._mapFromTrustedHosts = None
        self._extAttCertList = None
        self._extTrustedHostList = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, reqAuthorisationRequest, [ZSI.TC.String(pname="aaWSDL",aname="_aaWSDL",optional=1),ZSI.TC.String(pname="sessID",aname="_sessID",optional=1),ZSI.TC.String(pname="reqRole",aname="_reqRole",optional=1),ZSI.TC.Boolean(pname="mapFromTrustedHosts",aname="_mapFromTrustedHosts",optional=1),ZSI.TC.Any(pname="extAttCertList",aname="_extAttCertList",optional=1),ZSI.TC.Any(pname="extTrustedHostList",aname="_extTrustedHostList",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class reqAuthorisationRequestWrapper(reqAuthorisationRequest):
    """wrapper for rpc:encoded message"""

    typecode = reqAuthorisationRequest(name='reqAuthorisation', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        reqAuthorisationRequest.__init__( self, name='reqAuthorisation', ns='urn:sessionMgr' )

class reqAuthorisationResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._attCert = None
        self._extAttCertList = None
        self._statCode = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, reqAuthorisationResponse, [ZSI.TC.String(pname="attCert",aname="_attCert",optional=1),ZSI.TC.Any(pname="extAttCertList",aname="_extAttCertList",optional=1),ZSI.TC.String(pname="statCode",aname="_statCode",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class reqAuthorisationResponseWrapper(reqAuthorisationResponse):
    """wrapper for rpc:encoded message"""

    typecode = reqAuthorisationResponse(name='reqAuthorisationResponse', ns='urn:sessionMgr')
    def __init__( self, name=None, ns=None, **kw ):
        reqAuthorisationResponse.__init__( self, name='reqAuthorisationResponse', ns='urn:sessionMgr' )
