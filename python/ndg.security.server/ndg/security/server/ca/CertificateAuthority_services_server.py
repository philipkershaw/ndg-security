##################################################
# CertificateAuthority_services_server.py
#      Generated by ZSI.generate.wsdl2dispatch.DelAuthServiceModuleWriter
#
##################################################

from ndg.security.common.ca.CertificateAuthority_services import *
from ZSI.ServiceContainer import ServiceSOAPBinding

class CertificateAuthorityService(ServiceSOAPBinding):
    soapAction = {}
    root = {}
    _wsdl = """<?xml version=\"1.0\" ?>
<wsdl:definitions name=\"CertificateAuthority\" targetNamespace=\"urn:ndg:security:ca\" xmlns=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:tns=\"urn:ndg:security:ca\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">

  <wsdl:types>
    <xsd:schema targetNamespace=\"urn:ndg:security:ca\">
    
      <xsd:element name=\"issueCert\">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"x509CertReq\" type=\"xsd:string\"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name=\"issueCertResponse\">
        <xsd:complexType>
		  <xsd:sequence>
	        <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"x509Cert\" type=\"xsd:string\"/>
		  </xsd:sequence>
		</xsd:complexType>
      </xsd:element>
    
      <xsd:element name=\"revokeCert\">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"x509Cert\" type=\"xsd:string\"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name=\"revokeCertResponse\">
        <xsd:complexType/>
      </xsd:element>
    
      <xsd:element name=\"getCRL\">
        <xsd:complexType/>
      </xsd:element>
      
      <xsd:element name=\"getCRLResponse\">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"crl\" type=\"xsd:string\"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
    </xsd:schema>
  </wsdl:types>

  <wsdl:message name=\"issueCertInputMsg\">
    <wsdl:part element=\"tns:issueCert\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"issueCertOutputMsg\">
    <wsdl:part element=\"tns:issueCertResponse\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"revokeCertInputMsg\">
    <wsdl:part element=\"tns:revokeCert\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"revokeCertOutputMsg\">
    <wsdl:part element=\"tns:revokeCertResponse\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"getCRLInputMsg\">
    <wsdl:part element=\"tns:getCRL\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:message name=\"getCRLOutputMsg\">
    <wsdl:part element=\"tns:getCRLResponse\" name=\"parameters\"/>
  </wsdl:message>

  <wsdl:portType name=\"CertificateAuthority\">
    <wsdl:operation name=\"issueCert\">
      <wsdl:input message=\"tns:issueCertInputMsg\"/>
      <wsdl:output message=\"tns:issueCertOutputMsg\"/>     
    </wsdl:operation>
    
    <wsdl:operation name=\"revokeCert\">
      <wsdl:input message=\"tns:revokeCertInputMsg\"/>
      <wsdl:output message=\"tns:revokeCertOutputMsg\"/>
    </wsdl:operation>
    
    <wsdl:operation name=\"getCRL\">
      <wsdl:input message=\"tns:getCRLInputMsg\"/>
      <wsdl:output message=\"tns:getCRLOutputMsg\"/>
    </wsdl:operation>
  </wsdl:portType>

  <wsdl:binding name=\"CertificateAuthorityBinding\" type=\"tns:CertificateAuthority\">
    <soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>
    <wsdl:operation name=\"issueCert\">
      <soap:operation soapAction=\"issueCert\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name=\"revokeCert\">
      <soap:operation soapAction=\"revokeCert\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name=\"getCRL\">
      <soap:operation soapAction=\"getCRL\"/>
      <wsdl:input>
        <soap:body use=\"literal\"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=\"literal\"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>

  <wsdl:service name=\"CertificateAuthorityService\">
    <wsdl:documentation>NDG Certificate Authority web service</wsdl:documentation>
    <wsdl:port binding=\"tns:CertificateAuthorityBinding\" name=\"CertificateAuthority\">
      <soap:address location=\"http://localhost:5001\"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>"""

    def __init__(self, post='', **kw):
        ServiceSOAPBinding.__init__(self, post)
        if kw.has_key('impl'):
            self.impl = kw['impl']
        self.auth_method_name = None
        if kw.has_key('auth_method_name'):
            self.auth_method_name = kw['auth_method_name']
    def authorize(self, auth_info, post, action):
        if self.auth_method_name and hasattr(self.impl, self.auth_method_name):
            return getattr(self.impl, self.auth_method_name)(auth_info, post, action)
        else:
            return 1

    def soap_issueCert(self, ps):
        self.request = ps.Parse(issueCertInputMsg.typecode)
        parameters = self.request._x509CertReq

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.issueCert(parameters)

        result = issueCertOutputMsg()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._x509Cert = parameters
        return self.request, result

    soapAction['issueCert'] = 'soap_issueCert'
    root[(issueCertInputMsg.typecode.nspname,issueCertInputMsg.typecode.pname)] = 'soap_issueCert'

    def soap_revokeCert(self, ps):
        self.request = ps.Parse(revokeCertInputMsg.typecode)
        parameters = self.request._x509Cert

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.revokeCert(parameters)

        result = revokeCertOutputMsg()
        return self.request, result

    soapAction['revokeCert'] = 'soap_revokeCert'
    root[(revokeCertInputMsg.typecode.nspname,revokeCertInputMsg.typecode.pname)] = 'soap_revokeCert'

    def soap_getCRL(self, ps):
        self.request = ps.Parse(getCRLInputMsg.typecode)

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.getCRL()

        result = getCRLOutputMsg()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._crl = parameters
        return self.request, result

    soapAction['getCRL'] = 'soap_getCRL'
    root[(getCRLInputMsg.typecode.nspname,getCRLInputMsg.typecode.pname)] = 'soap_getCRL'

