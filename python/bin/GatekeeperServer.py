#!/usr/bin/env python

"""NDG Gatekeeper Web Service server interface

NERC Data Grid Project

P J Kershaw 18/05/06

Copyright (C) 2006 CCLRC & NERC

This software may be distributed under the terms of the Q Public License,
version 1.0 or later.
"""

# Handle socket errors from WS
import socket 

# Command line processing
import sys
import os
import optparse

# Web service interface
from ZSI import dispatch
from ZSI.ServiceContainer import ServiceContainer, SOAPRequestHandler

# Gatekeeper Web Services stub code generated by wsdl2py and 
# wsdl2dispatch
from NDG.gatekeeper_services import *
from NDG.gatekeeper_services_server import gatekeeper

# Gatekeeper
from NDG.Gatekeeper import *


#_____________________________________________________________________________
class GatekeeperSOAPRequestHandler(SOAPRequestHandler):
     """Add a do_GET method to return the WSDL on HTTP GET requests.
     Please note that the path to the wsdl file is derived from what
     the HTTP invocation delivers (which is put into the self.path
     attribute), so you might want to change this addressing scheme.
     """
     def do_GET(self):
         """Return the WSDL file."""
         
         wsdlfile = "/var/www/html/gatekeeper.wsdl"
         
         print "> > > > > using wsdlfile", wsdlfile
         wsdl = open(wsdlfile).read()
         self.send_xml(wsdl)
 
     def do_POST(self):
          """Fudge to get _Dispatch to pick up the correct address
          - seems to be necessary when putting proxy redirect for port in
          the wsdl e.g. http://glue.badc.rl.ac.uk/gatekeeper points to the
          default port for the Gatekeeper."""
          self.path = "/gatekeeper.wsdl"
          SOAPRequestHandler.do_POST(self)
       
       
#_____________________________________________________________________________
# Copied from ZSI.ServiceContainer, extended to instantiate with a custom
# request handler
def AsServer(port=80, services=(), RequestHandlerClass=SOAPRequestHandler):
      """port --
          services -- list of service instances
       """
      address = ("127.0.0.1", port)
      sc = ServiceContainer(address, RequestHandlerClass=RequestHandlerClass)
      for service in services:
           path = service.getPost()
           sc.setNode(service, path)
      sc.serve_forever()


#_____________________________________________________________________________
if __name__ == '__main__':

    parser = optparse.OptionParser()
    parser.add_option("-p", 
                      "--port", 
                      dest="port",
                      type="int",
                      default=5200,
                      help="specify a port number to override the default")

    parser.add_option("-f", 
                      "--file",
                      dest="propFilePath",
                      help=\
   "properties file path - default is $NDG_DIR/conf/gatekeeperProperties.xml")

    parser.add_option("-d", 
                      "--debug",
                      dest="debug",
                      action="store_true",
                      default=False,
                      help="set to stop in debugger on receipt of WS request")

    (options, args) = parser.parse_args()


    if options.propFilePath is None:
        # Check in installation area otherwise assume local directory
        if 'NDG_DIR' in os.environ:
            propFileDir = os.path.join(os.environ['NDG_DIR'], "conf")
        else:
            propFileDir = "."

        options.propFilePath = os.path.join(propFileDir, 
                                            'gatekeeperProperties.xml')


    # Create server instance at start up
    try:
        gatekeeperSrv = Gatekeeper(propFilePath=options.propFilePath)

    except Exception, e:
        sys.stderr.write("Initialising Gatekeeper: %s\n" % str(e))
        sys.exit(1)
    
    print "Gatekeeper Server listening..."
    try:
         AsServer(port=options.port, 
                  services=[gatekeeper(gatekeeperSrv, debug=options.debug)], 
                  RequestHandlerClass=GatekeeperSOAPRequestHandler)

    except KeyboardInterrupt:
        sys.exit(0)

    except socket.error, e:
        sys.stderr.write("Gatekeeper Server socket error: %s\n" % \
                         e[1])
        sys.exit(1)
        
    except Exception, e:
        sys.stderr.write("Gatekeeper Server: %s\n" % str(e))
        sys.exit(1)
        
