#
# INI file for testing the SAML Authorisation Query interface.  It uses a
# test stub for the Authorisation Service 
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
testConfigDir = ../../../config
port = 5000
baseURI = localhost:%(port)s

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = %(port)s

[pipeline:main]
pipeline = TestAuthorisationServiceFilter SAMLSoapAuthzDecisionInterfaceFilter TestApp

[app:TestApp]
paste.app_factory = ndg.saml.test.binding.soap:TestApp

#______________________________________________________________________________
# SAML/SOAP query interface to the Authorisation Service
[filter:SAMLSoapAuthzDecisionInterfaceFilter]
paste.filter_app_factory = ndg.saml.saml2.binding.soap.server.wsgi.queryinterface:SOAPQueryInterfaceMiddleware.filter_app_factory
prefix = saml.

# The URI path for this service
saml.mountPath = /authorisation-service

# The key name in environ which the upstream authorisation service must assign
# to its authorisation query callback
saml.queryInterfaceKeyName = AUTHZ_DECISION_QUERY_FUNC

# ElementTree based XML parsing and serialisation used for SAML messages
saml.deserialise = ndg.saml.xml.etree:AuthzDecisionQueryElementTree.fromXML
saml.serialise = ndg.saml.xml.etree:ResponseElementTree.toXML

# Sets the identity of THIS authorisation service when filling in SAML responses
saml.issuerName = /O=Test/OU=Authorisation Service
saml.issuerFormat = urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName

#______________________________________________________________________________
# Authorisation Service WSGI settings
[filter:TestAuthorisationServiceFilter]
# This filter is a container for a binding to a SOAP/SAML based interface to the
# Authorisation Service.  It contains a XACML Context handler which manages
# requests from Policy Enforcement Points to the PDP and also enables the PDP
# to make attribute queries to Policy Information Point
paste.filter_app_factory = ndg.security.server.wsgi.authz.service:AuthorisationServiceMiddleware.filter_app_factory
prefix = authz.
authz.queryInterfaceKeyName = AUTHZ_DECISION_QUERY_FUNC

# Lifetime for authorisation assertions issued from this service
authz.xacmlContext.assertionLifetime = 86400

#
# XACML Context handler manages PEP (Policy Information Point) requests and the 
# PDP's (Policy Decison Point's) interface to the PIP (Policy Information Point)
# 

# XACML Policy file
authz.ctx_handler.policyFilePath = %(here)s/policy.xml

# Settings for SAML authorisation decision response to a Policy Enforcement Point
# making a decision query
authz.ctx_handler.issuerName = O=NDG, OU=Security, CN=localhost
authz.ctx_handler.issuerFormat = urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName
authz.ctx_handler.assertionLifetime = 86400

#
# Policy Information Point interface settings
#
# The Context handler is a client to the PIP, passing on attribute queries 
# on behalf of the PDP onwards to the PIP

# 
# Attribute ID -> Attribute Authority mapping file.  The PIP, on receipt of a 
# query from the XACML context handler, checks the attribute(s) being queried 
# for and looks up this mapping to determine which attribute authority to query 
# to find out if the subject has the attribute in their entitlement
authz.ctx_handler.pip.mappingFilePath = %(here)s/pip-mapping.txt

# The attribute ID of the subject value to extract from the XACML request
# context and pass in the SAML attribute query
authz.ctx_handler.pip.subjectAttributeId = urn:esg:openid

# The context handler 
authz.ctx_handler.pip.attributeQuery.issuerName = %(authz.ctx_handler.issuerName)s
authz.ctx_handler.pip.attributeQuery.issuerFormat = %(authz.ctx_handler.issuerFormat)s

# These settings configure SSL mutual authentication for the query to the SAML Attribute Authority
authz.ctx_handler.pip.attributeQuery.sslCertFilePath = $NDGSEC_TEST_CONFIG_DIR/pki/localhost.crt
authz.ctx_handler.pip.attributeQuery.sslPriKeyFilePath = $NDGSEC_TEST_CONFIG_DIR/pki/localhost.key
authz.ctx_handler.pip.attributeQuery.sslCACertDir = $NDGSEC_TEST_CONFIG_DIR/ca


# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_ndg]
level = DEBUG
handlers = 
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y/%m/%d %H:%M:%S
