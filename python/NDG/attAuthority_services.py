################################################## 
# attAuthority_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class attAuthorityServiceInterface:
    def getattAuthority(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class attAuthorityServiceLocator(attAuthorityServiceInterface):
    attAuthority_address = "http://127.0.0.1:5000/attAuthority.wsdl"
    def getattAuthorityAddress(self):
        return attAuthorityServiceLocator.attAuthority_address

    def getattAuthority(self, portAddress=None, **kw):
        return attAuthorityBindingSOAP(portAddress or attAuthorityServiceLocator.attAuthority_address, **kw)


class attAuthorityBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def getTrustedHostInfo(self, request):
        """
        @param: request to getTrustedHostInfoRequest::
          _usrRole: str

        @return: response from getTrustedHostInfoResponse::
          _errMsg: str
          _trustedHostInfo: Any
        """

        if not isinstance(request, getTrustedHostInfoRequest) and\
            not issubclass(getTrustedHostInfoRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:attAuthority#getTrustedHostInfo", **kw)
        response = self.binding.Receive(getTrustedHostInfoResponseWrapper())
        if not isinstance(response, getTrustedHostInfoResponse) and\
            not issubclass(getTrustedHostInfoResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def reqAuthorisation(self, request):
        """
        @param: request to reqAuthorisationRequest::
          _usrAttCert: str
          _usrProxyCert: str

        @return: response from reqAuthorisationResponse::
          _attCert: str
          _errMsg: str
          _statCode: str
        """

        if not isinstance(request, reqAuthorisationRequest) and\
            not issubclass(reqAuthorisationRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:attAuthority#reqAuthorisation", **kw)
        response = self.binding.Receive(reqAuthorisationResponseWrapper())
        if not isinstance(response, reqAuthorisationResponse) and\
            not issubclass(reqAuthorisationResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class getTrustedHostInfoRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._usrRole = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, getTrustedHostInfoRequest, [ZSI.TC.String(pname="usrRole",aname="_usrRole",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class getTrustedHostInfoRequestWrapper(getTrustedHostInfoRequest):
    """wrapper for rpc:encoded message"""

    typecode = getTrustedHostInfoRequest(name='getTrustedHostInfo', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        getTrustedHostInfoRequest.__init__( self, name='getTrustedHostInfo', ns='urn:attAuthority' )

class getTrustedHostInfoResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._trustedHostInfo = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, getTrustedHostInfoResponse, [ZSI.TC.Any(pname="trustedHostInfo",aname="_trustedHostInfo",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class getTrustedHostInfoResponseWrapper(getTrustedHostInfoResponse):
    """wrapper for rpc:encoded message"""

    typecode = getTrustedHostInfoResponse(name='getTrustedHostInfoResponse', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        getTrustedHostInfoResponse.__init__( self, name='getTrustedHostInfoResponse', ns='urn:attAuthority' )

class reqAuthorisationRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._usrProxyCert = None
        self._usrAttCert = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, reqAuthorisationRequest, [ZSI.TC.String(pname="usrProxyCert",aname="_usrProxyCert",optional=1),ZSI.TC.String(pname="usrAttCert",aname="_usrAttCert",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class reqAuthorisationRequestWrapper(reqAuthorisationRequest):
    """wrapper for rpc:encoded message"""

    typecode = reqAuthorisationRequest(name='reqAuthorisation', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        reqAuthorisationRequest.__init__( self, name='reqAuthorisation', ns='urn:attAuthority' )

class reqAuthorisationResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._attCert = None
        self._statCode = None
        self._errMsg = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, reqAuthorisationResponse, [ZSI.TC.String(pname="attCert",aname="_attCert",optional=1),ZSI.TC.String(pname="statCode",aname="_statCode",optional=1),ZSI.TC.String(pname="errMsg",aname="_errMsg",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class reqAuthorisationResponseWrapper(reqAuthorisationResponse):
    """wrapper for rpc:encoded message"""

    typecode = reqAuthorisationResponse(name='reqAuthorisationResponse', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        reqAuthorisationResponse.__init__( self, name='reqAuthorisationResponse', ns='urn:attAuthority' )
