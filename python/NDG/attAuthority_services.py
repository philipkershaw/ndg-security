################################################## 
# attAuthority_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class attAuthorityServiceInterface:
    def getattAuthority(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class attAuthorityServiceLocator(attAuthorityServiceInterface):
    attAuthority_address = "http://127.0.0.1:5000/attAuthority.wsdl"
    def getattAuthorityAddress(self):
        return attAuthorityServiceLocator.attAuthority_address

    def getattAuthority(self, portAddress=None, **kw):
        return attAuthorityBindingSOAP(portAddress or attAuthorityServiceLocator.attAuthority_address, **kw)


class attAuthorityBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def getTrustedHostInfo(self, request):
        """
        @param: request to trustedHostInfoRequest::
          _trustedHostInfoReq: str

        @return: response from trustedHostInfoResponse::
          _trustedHostInfoResp: str
        """

        if not isinstance(request, trustedHostInfoRequest) and\
            not issubclass(trustedHostInfoRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:attAuthority#getTrustedHostInfo", **kw)
        response = self.binding.Receive(trustedHostInfoResponseWrapper())
        if not isinstance(response, trustedHostInfoResponse) and\
            not issubclass(trustedHostInfoResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def reqAuthorisation(self, request):
        """
        @param: request to authorisationRequest::
          _authorisationReq: str

        @return: response from authorisationResponse::
          _authorisationResp: str
        """

        if not isinstance(request, authorisationRequest) and\
            not issubclass(authorisationRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:attAuthority#reqAuthorisation", **kw)
        response = self.binding.Receive(authorisationResponseWrapper())
        if not isinstance(response, authorisationResponse) and\
            not issubclass(authorisationResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class authorisationRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._authorisationReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, authorisationRequest, [ZSI.TC.String(pname="authorisationReq",aname="_authorisationReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class authorisationRequestWrapper(authorisationRequest):
    """wrapper for rpc:encoded message"""

    typecode = authorisationRequest(name='reqAuthorisation', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        authorisationRequest.__init__( self, name='reqAuthorisation', ns='urn:attAuthority' )

class authorisationResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._authorisationResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, authorisationResponse, [ZSI.TC.String(pname="authorisationResp",aname="_authorisationResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class authorisationResponseWrapper(authorisationResponse):
    """wrapper for rpc:encoded message"""

    typecode = authorisationResponse(name='reqAuthorisationResponse', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        authorisationResponse.__init__( self, name='reqAuthorisationResponse', ns='urn:attAuthority' )

class trustedHostInfoRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._trustedHostInfoReq = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, trustedHostInfoRequest, [ZSI.TC.String(pname="trustedHostInfoReq",aname="_trustedHostInfoReq",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class trustedHostInfoRequestWrapper(trustedHostInfoRequest):
    """wrapper for rpc:encoded message"""

    typecode = trustedHostInfoRequest(name='getTrustedHostInfo', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        trustedHostInfoRequest.__init__( self, name='getTrustedHostInfo', ns='urn:attAuthority' )

class trustedHostInfoResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._trustedHostInfoResp = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, trustedHostInfoResponse, [ZSI.TC.String(pname="trustedHostInfoResp",aname="_trustedHostInfoResp",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class trustedHostInfoResponseWrapper(trustedHostInfoResponse):
    """wrapper for rpc:encoded message"""

    typecode = trustedHostInfoResponse(name='getTrustedHostInfoResponse', ns='urn:attAuthority')
    def __init__( self, name=None, ns=None, **kw ):
        trustedHostInfoResponse.__init__( self, name='getTrustedHostInfoResponse', ns='urn:attAuthority' )
