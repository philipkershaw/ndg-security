# Configuration file for Attribute Authority Server 
# 
# NERC Data Grid Project
# 
# C Byrom 20/08/08
# 
# Copyright (C) 2009 Science and Technology Facilities Council
# 
# This software may be distributed under the terms of the Q Public License,
# version 1.0 or later.
#
[DEFAULT]
# 'name' setting MUST agree with map config file 'thisHost' name attribute
name: Site B

# Lifetime is measured in seconds
attCertLifetime: 28800 
# Allow an offset for clock skew between servers running 
# security services. NB, measured in seconds - use a minus sign for time in the past
attCertNotBeforeOff: 0
# All Attribute Certificates issued are recorded in this dir
attCertDir: %(here)s/attributeCertificateLog

# Files in attCertDir are stored using a rotating file handler
# attCertFileLogCnt sets the max number of files created before the first is overwritten
attCertFileName: ac.xml
attCertFileLogCnt: 16
dnSeparator:/

# Attribute Certificate signature
signingPriKeyFilePath: %(here)s/siteB-aa.key
signingCertFilePath: %(here)s/siteB-aa.crt
caCertFilePathList: $NDGSEC_UNITTEST_CONFIG_DIR/ca/ndg-test-ca.crt

# Location of role mapping file
mapConfigFile: %(here)s/siteBMapConfig.xml

# Settings for custom AttributeInterface derived class to get user roles for given user ID
attributeInterface.modFilePath: %(here)s
attributeInterface.modName: siteBUserRoles
attributeInterface.className: TestUserRoles
attributeInterface.propertiesFilePath: 


#
# SOAP Signature Handler settings
# Leave blank for NO SOAP signature
[WS-Security]
#
# OUTBOUND MESSAGE CONFIG

# CA Certificates used to verify X.509 certs used in Attribute Certificates.
# The CA certificates of other NDG trusted sites should go here.  NB, multiple
# values should be delimited by a space
caCertFilePathList: $NDGSEC_UNITTEST_CONFIG_DIR/ca/ndg-test-ca.crt $NDGSEC_UNITTEST_CONFIG_DIR/ca/cacert.pem

# Signature of an outbound message

# Certificate associated with private key used to sign a message.  The sign 
# method will add this to the BinarySecurityToken element of the WSSE header.  
# binSecTokValType attribute must be set to 'X509' or 'X509v3' ValueType.  
# As an alternative, use signingCertChain - see below...

# PEM encoded cert
signingCertFilePath: %(here)s/siteB-aa.crt

# ... or provide file path to PEM encoded private key file
signingPriKeyFilePath: %(here)s/siteB-aa.key

# Password protecting private key.  Leave blank if there is no password.
signingPriKeyPwd=

# Pass a list of certificates ',' separated PEM encoded certs constituting a 
# chain of trust from the certificate used to verifying the signature backward 
# to the CA cert.  The CA cert need not be included.  To use this option, 
# reqBinSecTokValType must be set to the X509PKIPathv1
signingCertChain=

# Inclusive namespace prefixes Canonicalisation of reference elements - 
# space separated list e.g. refC14nInclNS=wsse ds ns1
refC14nInclNS:

# Inclusive namespaces prefixes for Canonicalisation of SignedInfo element -
# same format as the above
signedInfoC14nInclNS:


# Set the ValueType for the BinarySecurityToken added to the WSSE header for a
# signed message.  See __setReqBinSecTokValType method and binSecTokValType 
# class variable for options - it may be one of X509, X509v3, X509PKIPathv1 or 
# give full namespace to alternative - see 
# ZSI.wstools.Namespaces.OASIS.X509TOKEN
#
# binSecTokValType determines whether signingCert or signingCertChain 
# attributes will be used.
reqBinSecTokValType: X509v3

# For WSSE 1.1 - service returns signature confirmation containing signature 
# value sent by client
applySignatureConfirmation: True


#
# INBOUND MESSAGE CONFIG

# X.509 certificate used by verify method to verify a message.  This argument 
# can be omitted if the message to be verified contains the X.509 certificate 
# in the BinarySecurityToken element.  In this case, the cert read from the
# message will be assigned to the verifyingCert attribute.

# Provide the PEM encoded content here
verifyingCert=

# ... or provide file path PEM encode cert here
verifyingCertFilePath=

