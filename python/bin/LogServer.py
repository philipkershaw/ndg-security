#!/usr/bin/env python

"""NDG Logging Web Service server interface

NERC Data Grid Project

P J Kershaw 12/05/06

Copyright (C) 2006 CCLRC & NERC

This software may be distributed under the terms of the Q Public License,
version 1.0 or later.
"""

# Handle socket errors from WS
import socket 

# Command line processing
import sys
import os
import optparse

# Web service interface
from ZSI import dispatch
from ZSI.ServiceContainer import ServiceContainer, SOAPRequestHandler

# Logging Web Services stub code generated by wsdl2py and 
# wsdl2dispatch
from NDG.log_services import *
from NDG.log_services_server import log

# Logging
from NDG.Log import *


#_____________________________________________________________________________
class LogSOAPRequestHandler(SOAPRequestHandler):
     """Add a do_GET method to return the WSDL on HTTP GET requests.
     Please note that the path to the wsdl file is derived from what
     the HTTP invocation delivers (which is put into the self.path
     attribute), so you might want to change this addressing scheme.
     """
     def do_GET(self):
         """Return the WSDL file."""
         
         wsdlfile = "/var/www/html/log.wsdl"
         
         print "> > > > > using wsdlfile", wsdlfile
         wsdl = open(wsdlfile).read()
         self.send_xml(wsdl)
 
     def do_POST(self):
          """Fudge to get _Dispatch to pick up the correct address
          - seems to be necessary when putting proxy redirect for port in
          the wsdl e.g. http://glue.badc.rl.ac.uk/log points to the
          default port for the Logging."""
          self.path = "/log.wsdl"
          SOAPRequestHandler.do_POST(self)
       
       
#_____________________________________________________________________________
# Copied from ZSI.ServiceContainer, extended to instantiate with a custom
# request handler
def AsServer(port=80, services=(), RequestHandlerClass=SOAPRequestHandler):
      """port --
          services -- list of service instances
       """
      address = ("127.0.0.1", port)
      sc = ServiceContainer(address, RequestHandlerClass=RequestHandlerClass)
      for service in services:
           path = service.getPost()
           sc.setNode(service, path)
      sc.serve_forever()


#_____________________________________________________________________________
def runInForegnd():
    """Run Log Server in the same process as this script"""
        
    print "Logging Server listening..."
    try:
         AsServer(port=options.port, 
                  services=(log(logSrv, debug=options.debug),), 
                  RequestHandlerClass=LogSOAPRequestHandler)

    except KeyboardInterrupt:
        sys.exit(0)

    except socket.error, e:
        print >>sys.stderr, "Log Server socket error: %s" % e[1]
        sys.exit(1)

    except Exception, e:
        print >>sys.stderr, "Log Server: %s" % e
        sys.exit(1)
        

#_____________________________________________________________________________
def fork(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
    """Run Log Server in a separate child process
    
    Thanks to Jorgen Hermann and user contributors for fork code
    
    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012
    
    """
    
    try: 
        pid = os.fork() 
        if pid > 0:
            # exit first parent
            sys.exit(0) 
    except OSError, e: 
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1)

    # Decouple from parent environment
    os.chdir("/") # Allows for current dir path being renamed or deleted
    os.setsid() 
    os.umask(0) 
    
    # Redirect standard file descriptors
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    
    sys.stdout.flush()
    sys.stderr.flush()

    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())
    
    # Do second fork
    try: 
        pid = os.fork() 
        if pid > 0:
            # exit from second parent
            sys.exit(pid) 
    except OSError, e: 
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1) 

    # start the daemon main loop
    try:
         AsServer(port=options.port, 
                  services=(log(logSrv, debug=options.debug),), 
                  RequestHandlerClass=LogSOAPRequestHandler)

    except socket.error, e:
        print >>sys.stderr, "Log Server socket error: %s" % e[1]
        sys.exit(1)

    except Exception, e:
        print >>sys.stderr, "Log Server: %s" % e
        sys.exit(1)


#_____________________________________________________________________________
if __name__ == '__main__':

    parser = optparse.OptionParser()


    # Port may be set from an environment variable.  Note that this will be
    # overridden if the port command line argument is set 
    logPortNumEnvVarName = 'NDG_LOG_PORT_NUM'
    defaultPort = 5100
    
    initPort = logPortNumEnvVarName in os.environ and \
                        int(os.environ[logPortNumEnvVarName]) or defaultPort
                        
    parser.add_option("-p", 
                      "--port", 
                      dest="port",
                      type="int",
                      default=initPort,
                      help=\
"specify a port number - default is %d or set environment variable \"%s\"" % \
                                          (defaultPort, logPortNumEnvVarName))


    logFileDir = 'log'
    logFilename = 'ndg.log'
    logFileDirPath = 'NDG_DIR' in os.environ and \
                        os.path.join(os.environ['NDG_DIR'], logFileDir) or "."

    parser.add_option("-f", 
                      "--log-file",
                      dest="logFilePath",
                      default=os.path.join(logFileDirPath, logFilename),
                      help=\
"""file path for log file - default is $NDG_DIR/%s/%s or /tmp/%s if NDG_DIR
is not set""" % (logFileDir, logFilename, logFilename))
    
    foregndFlags = ("-i", "--foreground")
    parser.add_option(action="store_true",
                      dest="foregndProc",
                      default=False,
                      help=\
"run server as process in the foreground.  If not set, fork a child process",
                      *foregndFlags)

    parser.add_option("-d", 
                      "--debug",
                      dest="debug",
                      action="store_true",
                      default=False,
                      help=\
"set to stop in debugger on receipt of WS request.  %s flag must be set also"\
                                            % '/'.join(foregndFlags))

    parser.add_option("-c", 
                      "--console",
                      dest="console",
                      action="store_true",
                      default=False,
                      help=\
"echo log messages to stderr at console window.  %s flag must be set also" \
                                            % '/'.join(foregndFlags))

    (options, args) = parser.parse_args()


    # Create server instance at start up
    try:
        logSrv = Log(logFilePath=options.logFilePath, console=options.console)

    except Exception, e:
        print >>sys.stderr, "Initialising Logging: %s\n" % str(e)
        sys.exit(1)

    if options.foregndProc:
        runInForegnd()
    else:
        if options.debug or options.console:
            print >>sys.stderr, \
                            "%s must be set for debug and console options" % \
                                                    '/'.join(foregndFlags)
            parser.print_help()
            sys.exit(1)
        
        # Set this flag to True to catch errors raised in the new process
        # in a log.  Normally stderr is re-directed to /dev/null to avoid
        # conflists with the parent process    
        logForkErr = False
        if logForkErr:
            import tempfile
            errLogH, errLogFilePath = tempfile.mkstemp(".err", "LogServer-")
        else:
            errLogFilePath = '/dev/null'

        # Run server in separate process
        fork(stderr=errLogFilePath)    
        
